{"project": "sympy", "project_url": "http://sympy.org/", "show_commit_url": "http://github.com/sympy/sympy/commit/", "hash_length": 8, "revision_to_hash": {"221": "5ca62f48fc46a1ad78c930baf41a8f185853c26e", "327": "79be938cd31d5777f2b115633aafdec63f4e2b3c", "576": "2f112ee80eadd68eba28224bd7cc4a568ed0cb42", "626": "99a857f5e03bd161724956f8f56c060911c72ce0", "634": "ffe3ee7e7cec4912756c4dc420e46af47554bafe", "647": "15730998189176c8e5a31d944a098202969238e6", "689": "2a503e7f37141d6b6577ce9d94df51f7fdb43594", "715": "f0b20273d7f443e688fd715a738181abe6167f2d", "757": "263f0be67909c67d245df19b009426cbcdbcb2cb", "766": "3bfe510f7980a283caec5d4363a10a1719f50127", "865": "48a6528052d2006adc587049f006a88b404b361f", "993": "59c43aae81347becdfe35fcb4712f9eaa42290e8", "1164": "6f7c1f20683fd92a2627b6902ce72e6e6b03bac5", "1223": "a13bbf9b6342d653ea4af6167f90d49dd5f98d93", "1367": "5fd088851e7e0903c0b1102dc2aae81cb10a0e37", "1496": "91e8deb79f7ac47d091fa7bd96a04de1b687c5cb", "1657": "29527970b7de602ba73af78a26939fa116f987ca", "1903": "e9e822e881fc20c5f19fc66996809653dc62de80", "1910": "2eef32be2ee7c0bbace333e7aacac7caae22a39b", "1913": "77cd74d5d4cf8ed528c662ccd7b4f748bf9ba76e", "2039": "9fc3cdb31144e69450168ae7b000d8b1a2560087", "2079": "a0c2d301663770f201eae0763da96db6daf3be9e", "2128": "4afce86f01061b902987ed741b9eb0a20f7edae3", "2132": "163977849a0f98ab3bc38bbf0c57d6fcbb7e1551", "2263": "11066c95855b70afe4bc6c996b052ef04577d79b", "2275": "63b83f1114107c76732f1ecedc51a504db41990b", "2298": "dbc6ecc86c591c07ab847ae340a8cf83a287daef", "2322": "9dd413b15a57643e7db64be7e3c4631ca8031e56", "2336": "5cf20a0f0a59a4ec7981be3db54504f0761cc290", "2338": "63b4fcbe4227a18b9150c7efae322d5d44c271e7", "2747": "243d4c8ab0e7e7815b1aa1f7843a0a558341d94d", "2748": "d033c66df89aa488b87ee6002ca2c5c39e6bd552", "2813": "632105e37f59d186eef6af5d5b54399b411f9d98", "7080": "4973909448873682a28d0d584bf6b5fc3580a924", "7117": "bf199c202ed36862c3990e85a4a9f243cb5693cb", "7332": "c9470ac4f44e7dacfb026cf74529db3ec0822145", "7834": "5d31bca66975f0ca10d5d7ecd91279650c9aa9e1", "7918": "556fe557e924e39b267e70de601ee98e55c0f44e", "15796": "db3f318f2df7014c43cbad593e456bcb1bedab0b", "15892": "bc35cf9e9b34d407b89e178c878977aa602a3dae", "21286": "7e3bcfbb14948c698d4bdddcb839d587ca602ae2", "21505": "f44c2c6afb1eaf5f1071b49bcd147e0d6197923a", "24122": "0975209e3ad0488ddc69f8ba57ca9aca5d7347c9", "24189": "576be9613571ada9aa4df3fa84a686fe96c279d7", "24279": "d007af8e5cd4e7a7f4b3a0a603b7ced492c7a784", "25168": "5fe5e63f84007b92cc85774b7464bb39242224b4", "25234": "ccb64e88fdf6e83eb17b2850d7fcd5e9a0c82425", "28879": "b0d20e924e2d66192fe44f2503272fdf0e09171e", "28917": "5350293ad2a807c2672f73cdd1c860a0a0169343", "29003": "5403e74b8f4d8a49f3532a2a26a052ae682d213d", "32218": "c86942c6ae2adfe505124366095c0dbeb5694aa2", "34135": "323d4a54eb94f6b79f32dd69779bf1952097def9", "34273": "9a15941d326bd7955b42bd7823015786d05132f7", "40557": "fe3b203a03005e39e857a8a209160aa8b4a48e25", "40651": "51be47d700717e2c88c53eed81e3155651a047d2", "41078": "f38e8dce3662a5782bc076da87803223bb529c18", "41185": "56cc73850cbc7b249cc429e9616c8cfc132d516d", "46289": "18633eb3e2ea5c14314183a18326e7b51b4687c3", "46334": "abf785361be62fba5462b120ca568a166bf5f924", "47423": "472c43cc11f921b98ba8634b12ddb80fa98602ed", "47513": "74affdcc0dfcd5f18ff82a189cf7fae80d507206", "51478": "c3b93bb215acfcbc6df55a255a773cdcccf66b6d", "51602": "9f6d5af61f0caca45fb87262aedbbee7435a0149", "51814": "52eea70a0f3d72fa05355cc0937d880f92d8a5de", "56572": "80c63c8df0c6f80886ca249165ad5cdc6e994171", "56574": "8c59469874775705f78bdb18461cd0b50479af57", "56578": "90bc9ee2709f95aeddd5d0024bf12d94235b426c", "56587": "26de23144e86c85599b99ac30b93c43e03669981", "56588": "1d769658a90a143ee1effd8a8c2c6a7e50825bca", "56598": "ae5f5b9e04378e8480671a44f97952cfb03219dc", "56601": "3c89c38fe4b0a8df8a9cefc186cfa9b78eaea88b", "56607": "28b1abed7fbff1328b709457f0e4c8546ca84f44", "56608": "1785408d3646e9bbfaebb3dec6476f1c2fc10fce", "56610": "9dcf87bc1c464fcef5e799ec3f79014ef2805c72", "56611": "e095fab66d321401bfa0364998f8e9f0c0e682fb", "56619": "d69ee2ae94f8eec0071de680e136e3fcf426b6d6", "56625": "6128b47aa008657715ce5c70b7c3fdd6bd3f1648", "56633": "e359645106eb79856089dcc2d6c6871b63550c97", "56646": "da58ee6a554db6f3f1f1c47250a0684c24d63803", "56675": "3f14fd44e4c5e708b31564aa9b84534d41c0721a", "56676": "d1cd8220bd15659d6531a0491d1683bf19ec0f61", "56679": "ace39d78ddce03ba289fe98a4775b7eed68f0fce", "56680": "d63decc3a6a5e1b27fd78a713794f8c4b4371ffe", "56689": "9f05a6586146fc95c27a3715c1aed7f3327d11e6", "56690": "2662c098cb19fb48c821ca890d6d664a2efda555", "56710": "0e1a9c21cdba69217ea35d2cee69c617f9898255", "56712": "029936987c7b35fcc6b347b580d4c154792344e7", "56721": "72f7ac2b141492d20b672ecadbd8a52695faf175", "56726": "f73034eaa8342dc70dc8b27da7cbbce0ee9e5e95", "56729": "6c9ce014a18bb025ece5da1a1cd94840589b251e", "56732": "b00ba9251ecb778fc7c771050c951a72946202e2", "56736": "1c9f33b16bc8dc8fd1ce9b151080dd107c084d1f", "56742": "ac3d57bcd29ffa32da97b285dd852207cc1696eb", "56744": "d19dfaeaa93de6d4fc0462d7eb1d47f681be1d15", "56756": "f8581068eb233026b8871ba88b37f1eab59aafc4", "56770": "a8ea8dee2aa9a6d5574c116c63148085679a42ec", "56825": "34ab0117f0071a4460acb76cfebc16e4bd2d596a", "56827": "7f92c96417d066700d096105282d6fe47ea085ef", "56828": "7d10c1ac6c23b5086cb779583c989302efd5cf05", "56842": "d670689ae212c4f0ad4549eda17a111404694a27", "56851": "6dc9ac07b311dc52b46c6c7f1529cf9fca0b2a23", "56855": "52069d42f4d6df1811269f4bf8c00da93e02fae6", "56857": "c461bd1ff9d178d1012b04fd0bf37ee3abb02cdd", "56867": "29bff87595aa60eaf0cf101866e65e8c7d02af44", "56868": "baea7411c2c5bfae8de3318359eefcf5345f4f9d", "56869": "cab3c1cbfa415ced4ea4e46542ae7eb7044df6d6", "56881": "3d2537a0a774e2842562c1cd54f4acaab8054be3", "56899": "5bcb7c644ffa9e7954232d47f0b279e36c96f8da", "56900": "62000f37b8821573ba00280524ffb4ac4a380875", "56905": "7501960ea18912f9055a32be50bda30805fc0c95", "56920": "520f0d1a77f180cf02f7f97b132f1974253dd274", "56924": "2831c73f10bdc3018e8b99d4f16adadbfded50ef", "56933": "0d99c52566820e9a5bb72eaec575fce7c0df4782", "56942": "2d3ca2aa7e94796855277ca710999efe143485d4", "56943": "503df9491ed0f2cd30f52590b7f2ceb18ecb410f", "56956": "5ccc83fbef7a4c0c4be3f55cf5e9145e88804076", "56958": "9da013ad0ddc3cd96fe505f2e47c63e372040916", "56968": "fbf508919adb0064505746b58d755d3a63fe6a4d", "56971": "70381f282f2d9d039da860e391fe51649df2779d", "56972": "278e34f0e2f97f4b59a276bfede32ebae8e5cc1d", "56974": "2954e54597ebe7319f766284ffe5303a6864df88", "56980": "5ec7dafd9617d26d09dd745cbb3077f07bc54a72", "56985": "378cb9c22dd0a8e961a165520849ea56ec97072c", "57039": "765d2c1995724d761bf1f8adb8ec2f567eca1547", "57040": "6fca8e1c182bb84432b4d7307f8bbf0e8899598b", "57047": "1b2ecfcd01ca7d1910dc6dc50a69c69f6a83983f", "57057": "f5af41f27a3f5542a76077176f2990d49922a817", "57064": "5a4642cb96d9dc6cf1de20e0c0bb919a038150e0", "57065": "41ef7c571856a1ffca270e5cc58b6bb9ff2945fc", "57067": "4a735bb4f38f7534f11c6634ab1cc36a8d57885e", "57076": "99663a6d90c793b6975c3dd8624174d620f0918f", "57086": "4ff82aaf85967bcf040871912fe872e16a9895cd", "57094": "270cf6880b441599bda9706e3c8caf696ef20302", "57106": "3b6b1d937ce1b9a8ce9e82eb9e7c96c0ee85c350", "57109": "24fda38589c91044a4dca327bde11e69547ff6a6", "57129": "cdf631e686b36bf5df4e9b8aaac4e57c79a2a1da", "57130": "b533fbca49c35b88b6a0bb68585c605d807679ad", "57131": "0bffa281e62b4d29fbe3cd22faa4d612a4b1ca76", "57151": "f7390e5fa2313be1c49959270358b2b0c62a1a57", "57208": "551f6fe60fe6d4251a0ac76e64197f23063af261", "57233": "80a00842e7164f7865d0933306a94d33ad7ca602", "57248": "ead19790ace80f62f7b61779a0abc7c5cf622708", "57268": "1ad8d166913e51c0c18ea8f687b3895d75f8e8d4", "57273": "e245f10facd199eae5a1c7e0c182d77d973a6aac", "57274": "d8ad815df4b0ac788813b1bc028d7dc75e29335d", "57278": "f927ca6823a246e04d7bce84886cbee243f4a4ec", "57279": "121ccd76879eabcb9567cb6f88d976f761f171d1", "57308": "0df7a2c62067c3e5e991da1acd8ed72c182db7b1", "57309": "7e6aa02d20ae577740a0bb10ad848142463ff325", "57310": "05e3342ed9306f60f3ab5dfcc07db0b0da41c59d", "57311": "d98abf000b189d4807c6f67307ebda47abb997f8", "57318": "1923822ddf8265199dbd9ef9ce09641d3fd042b9", "57332": "c559a8421ac4865ebfe66024be6cd43a6103a62b", "57353": "b5ec21ba36fa7656369cdc7589a3b637932b060a", "57354": "6dddc8d794477fdceca71a20da3bab4c9f3a3814", "57355": "6be36ff06dce9b806012703102bd04fd227cdb52", "57367": "ba2b0b9576422d7c1ca88e9322291f64a9c01e0f", "57370": "74b8046b46c70b201fe118cc36b29ce6c0d3b9ec", "57379": "b1e6ed5b20b8b7e13b95fa80b4e04632f9a5bacd", "57380": "fe55877b1a635f02d642ad498d64829d538c2f20", "57381": "b4f1aa3540fe68d078d76e78ba59d022dd6df39f", "57428": "7f509f88c65f431022deae7449f7df89c93c412d", "57429": "8ac5ad200d6929d293afc5fd59b412d14b6f7edf", "57437": "07c9a46b3f66e22add8e747aa2d4923e3d06022a", "57451": "255bb9906236b789a4c987ec87d2f35f091ef7cd", "57462": "d91a890c9074d8a3ad43443cf145227e8ca6ac8c", "57466": "f15276f693322a676846559d47de19f2319e8f5c", "57468": "37128935900ab6fb500d97579ca545bdbdb8e9be", "57471": "f3dcc2aa46f609a5a01b45ccd1926538fbe0a2bd", "57473": "f8e7019feded4e4d0852f49fe0ccfa777f0e8744", "57482": "ba80d1e493f21431b4bf729b3e0452cd47eb9566", "57488": "13e9721a56745890aebefc1b3c5a8289ee6db0ba", "57489": "cebe3719ca3d7f1e3b311f2c86c18cc30d7f7484", "57509": "79d03d39c7d7786a98eeb983b5f6c3ec2a77a2ac", "57519": "adb0ffef5f669839bea4c1a220dfe5f811709316", "57527": "ee2c2666ee735ff616fd7c912e23ae968e8d90e7", "57563": "5b87eacfd2b979faaf42b0a450577c4c737d027b", "57572": "b8d09d0abde73a78eae51b583779cbc2051e6ef3", "57573": "6347606ad1505ed5c8477e7befaaa91d82bd5bbd", "57592": "816cbadb8aa0de170d76526ae2f07c89f8352964", "57603": "f8582d78644220410ba9dcd093e06368867ac976", "57606": "a1fc659e21ad217a1658d0cdea018918142ec976", "57608": "921379b4a781a781bf2543f81e785ca45d7370f1", "57632": "3e68b6fb4a45ade1f8590cdbc5a5d779c2807e1f", "57633": "4fa29abf544a5cb86f90d949402a01db3ebb74f3", "57656": "b17014e0c9edcf4e1afab158b6781c78c9763d71", "57657": "4c6d4241445d32ae4c8388901b77deeca0c43ffb", "57664": "440d289ee1e8b54e5e3e5e7262e06651f5ec5878", "57675": "3fd2f6eae2ccdc0ac8459b657c6cfa64ab0534b0", "57679": "4bdfba0d9fc5e3e69ced9d6e56f2efb28e9f9668", "57690": "c31a29a77a8b405d19ef79193ff0878345c62189", "57707": "957f468b80325e33a40c37bbb50a6ca09e9784f8", "57716": "e696344ae3a8308399fe43d790880104dfe0e0b5", "57719": "df38ad11d3f3ab5b94c878346fe8bfcf40fa6027", "57728": "e2a0b86d8c8fddc5407ff8363ad3967e8470daf8", "57738": "09565e28d2373ba4e130a7bacff6c7a1c01a4a64", "57741": "1a68450500529ce63c6f48b17378af07a0a8558e", "57743": "3fd42c1efb9e74b6607558e6900d35be0484511e", "57748": "dede4098030c77de8c1f5e360f2e552169809411", "57764": "a9f0af41997f4fb06e24d064c3b9bb85952c05e1", "57775": "be0f67d5cfa8418a3a9c5e1c9885aae28e538a07", "57776": "3598399232132234bc646acc6ecb690a093d9d63", "57811": "34ffd6257be0a8d03a43257d5c9c347189baa5de", "57825": "10e09620b5adaae83613e9b1e45c4e945a85c94a", "57839": "c4423ca61ebcc9db91eefcbd2ffef7aa2b07d690", "57857": "ad2666e145cf59f805d0ae9173228fa342077930", "57860": "f119ab5d30e8b373dc8956d41b7c11e53c140209", "57899": "b288152a85fc1b3c50a05272f36de2e95395a618", "57918": "6cd0b9fade27be198ee24987be0eac709413d297", "57932": "f3c949f043adc907179b5dd12e736ecf9a75a9c6", "57947": "c580299ec3f05c5e8fb554a0b60a327cf2c11258", "57951": "cb214699949c16fedb698aac030e80d84ed97d66", "57966": "bbd670d781dc4fa0b0707948bda7a2b32369b25f", "57970": "a2beda4187ec0d1cbfda74a7bc1d090e86375d87", "57980": "77c9b6904d8ad45ac5b3c624adc5b4abcab41be5", "57985": "efdeb1f32d67292531641431bf1517c1bc67b8be", "57995": "805f019b2b106f947046f2090195917ae3299115", "58001": "2dbaf0d1e1f1f94d242239223f2fab05782382b5", "58006": "861016bb144dbc87e7f09d98ab0e704589ffdd3a", "58008": "734df62f161e1a93cf93289e87266b5baf738dfb", "58014": "69a8a4b05ceaec11ee63729b98fc9d1ec7e3583c", "58020": "791ee8e9c721b2b7fa21d1838d8770069ec51c5b", "58104": "cc046550137dbb87e173183b39110d33701414ad", "58114": "118d75541c967b7a52ad648354d9f19f7a090a85", "58115": "f5413ff89530b14ffc9b7359717f8c7ad03d2c6c", "58136": "83150ac50e60a890251e16a43196770394eb3e81", "58145": "0b8c672bb0d3a434625ce36d6150f8ac86be4648", "58149": "2451113425fad056cf397f6458e488de96bc489c", "58150": "9f98339b3344de9109f4d2780faf9822fb110848", "58163": "944b68815fd53656edeec2997ea66eefef98a872", "58172": "b1fd3b819758a0b1c7b6d721b9cfc20b9a22adbe", "58175": "aaf43fc338cf3fe7bd9fb8b8b3d71d9212bf963c", "58189": "ffc82854ca555b054bc8e516c18a7dcf705966ec", "58190": "fa71b7dad93861f19d0ec8cb6ce96f0f371b35f1", "58192": "dc9cd295a50d9fe79733562a63d409147d7220b5", "58205": "5425f44d1c8054370f0827747eb08e1d314a75f8", "58206": "8d689c2f0bf2d7ee0d65244f27e20849058caa5a", "58207": "72cfe65d174931103781042fd8b94ba2e2290904", "58209": "56c2b1ee21a2221a281411f6ece4874ce13ac064", "58210": "fa1432db689eb5eb49439d372a98f29a82627ba6", "58220": "1b9fffb6bd729169caebb7498da1d6693c95e581", "58232": "c0a1666835c5d8f3a2d63c75a65ae05cb81858c0", "58236": "6ec4afb1093b822345d1ce52fc7443ecdd19e6a3", "58249": "8a7dc8ef786cccbd7dc0fe0b0e6beec4dd1f7b49", "58267": "8c2e6c33ecf491664b83c78d8c26316c28e42e6b", "58271": "1f4716657bb00064681e8817155cee9079720e11", "58272": "ee20cd6667445d6ec98696d7bc6aa2e1872cad9e", "58273": "919599d19b08e37519554b0bbd300f5dea3b7587", "58274": "3c872145ca2a444f597c9d57b0e12fc16da7b17a", "58289": "fe8853fe3a124fc5a9c0799fdd00cc0595b919e9", "58295": "bbb3bf2897c29b7306a422fb8ff8893abfd27b49", "58319": "2b0fe5201531aa7ea8082a04469185f1c777691e", "58327": "64ef21f8f95d9e66f4a7f6fbe31033a52d180f6e", "58329": "ab4f0f13de45191098e2aee9198bb1b76d4513c3", "58330": "ac6fc320213b593a6629091004de0f804be39675", "58332": "1670f6af9644b9aea89480b1cb3e6e77fcbf7761", "58333": "8a5d89c7da7cadf3ac3a5430838526c4bd019527", "58337": "51a8eeeac89d19524532a2e89352e7342e4ba075", "58342": "0ce30022ec57027cfbb6a5848996996e0fedd4a7", "58376": "78a47b539632443276e522dca109f468ae560af7", "58377": "10cfb327433f5f97539eeb341e476f20c08514e2", "58380": "10126b7d2484f81836c9f23ef947705c1926b07b", "58392": "c4eb55dc3c6f6a197091d3eb43d55dbf84b70a33", "58393": "93d836fcdb38c6b3235f785adc45b34eb2a64a9e", "58398": "ca020282f5eb70f20a6012776bcddd568bb05d8e", "58412": "37ffe0f03e1deaaf6812d785db88bc7a96746cbd", "58431": "e8f49707665374fe8fa8d10332fa140b4f175dc1", "58434": "15580c494287ce50df8a5cc30cdc88fa87776fc5", "58458": "8848b032042cf1938f61b2d3243b68683ea0aa49", "58461": "33ff90009aeca38074fb04b83dce30366fd42451", "58464": "3ab09ff24d7990acc1c57dab6dbd4431e1d82f5b", "58466": "986033bcb62674aa7d368036e036ca4e18c63248", "58467": "3c34a09e98aaeffe18ac5352e49e9f258384a375", "58468": "0ce14be73a0671a9353280c595c1766e5a0fae27", "58472": "53733f0035fadb0e7774daec45b941ebbbd10b5a", "58473": "ef7bd27551b8f8fa7d55c85e51d8bb10a329545f", "58481": "4cee80af497a25f2c24acbbe20862b54698d5adc", "58488": "573204b0feddfbbf9e5da0033bd52985088dc56e", "58517": "4f8c4a8c81494961a03730ef989af63fd0532d67", "58519": "74227f900b05009d4eed62e34a166228788a32ca", "58553": "2ee06f3b3359ef3986878825e403c806b2b0c6ef", "58570": "cbadab3afdacbee9455a2c8f8084cd019811df82", "58574": "140758d1ca64ecfb49d6032beb3ecb2c93ad3294", "58581": "5acd9e2bcc4c4869993c844237a89864a317a1fa", "58585": "acc8a22e8891953d3445f1cac6786d4c0140fcfb", "58586": "67ac33ff4e6d8e50488d8b0780f6e6878db111a4", "58640": "3337178d2ac0b7f0c3756dc6cf8ed12e0bb31f52", "58643": "def3cde298d10995597c5da17ca6396236fe5c34", "58651": "0425d3d3396e6ad1d051cac29d94612e091af0a0", "58655": "a8a3a3b026cc55aa14010fc7cd7909806b6e116c", "58680": "530df7513e0734fe48b09658565753ac960aa125", "58681": "c3572e88d9fc12e8cf56df9ee9ba0a41544cf97c", "58682": "e37d1e23f5b86a39e5251133146d592c28b4ea0d", "58690": "81f0450da33f890e612b346c19f9c896f0480805", "58691": "2ebfc03077c38187d53989c4773fd765e4fccd7b", "58697": "d0ceeae7830a30067d701c952765070b45617016", "58706": "d7e2b239842ea2ab69ef64b8e1d692fb78a1bccd", "58713": "afbffa714654e4c8e8e853b7689d324e7146e40f", "58730": "a25f174b46bea902e3cec163fe1eb77f7987acc6", "58731": "8780f946183578a96f01aa6ed05fd944d7619911", "58732": "86d13edcbe88158cdb6a8f4f090828054a76f877", "58740": "6d30b92817daf559bbad9c9578baec798c3001e1", "58744": "0a49b721a3a405e0420778bc193fb877a3054086", "58745": "d90f7eab8cfeddf33a5fdbce3231f45be1918de6", "58775": "70c2ebae4c2dddb64f798e0ea2280dee3521ae47", "58776": "b95a36e9051293ff897849d6c70c9883d23008f4", "58781": "db1e3e87f5047aa9ac316dd2978fc1d193590c40", "58784": "c0a02c3c928dbbc42c008ed460bb662fc602f9d4", "58786": "aef572cdebb498b65ba37a1d56d72d7a2a455b61", "58792": "928864c6cd1bcc339af60c2170a3821e77ca6fef", "58796": "b17ef6effe278d5b861d65896cc53442a6370d8f", "58806": "8672866408df0ac122e1a967b6a384f4c1b08559", "58818": "44664d9f625a1c68bc492006cfe1012cb0b49ee4", "58838": "fa79486d30d27e4f401946a1121178437a63b2a1", "58839": "008440578d5242db244849b329aed33a93972e15", "58843": "d1f59a1c9c94e591b72eedc9f0630ca56e6b26ad", "58857": "714993f3467ff891e7acb6fb875499c2e498c0b5", "58866": "11b6680bd9d91de1107dd260369954632d73ae6e", "58880": "dc48d83435a6088e6dd284c712e6aeb0ecbe3fd1", "58882": "fcefd30cfbc6c929fb50b99403a5764ca019a603", "58894": "3dc7bc13469a35b7f5a0eb8b60b37d588ef17766", "58904": "8f231f2af3b52be6417a32bf3f905925089218b7", "58905": "0cd002ed0fb7ee3733d1aa6f30f581fae420de3f", "58907": "30428279cf3d5008c446e4115da4e4205c9ed67a", "58908": "5249a60ac4421dac811934e14b3c1f78d65779e6", "58909": "e49a009e4cbeb47bbe99625a827ffba463162326", "58914": "7142e631b3745ae0db442dcb581e423da9d70293", "58918": "4aee3c389d70eeaebd63c67b0bb8143dc83a77a1", "58920": "ada17781294d32aa229518fdadfb0dc395d848a1", "58923": "c5da3aced68953157109427f37ca29e2fbde3315", "58925": "cd86e3c3335a7f43379185c239619c576522ef4a", "58949": "67479fd67458b039e72d86af3dea5941e1351a79", "58950": "bd50a50a5fb124066b4a4de46590114d61c71425", "58954": "94b9de669f41dd76416c50f8097a22fdc9e8513d", "58972": "9be6816a5f30c4d326110f5d6c6f7c99dfeb8958", "58986": "e3a95d9da50e63d49fee2ecf82d0a32965a6d5e6", "58994": "71b4c265edb9c763deb53133e46121117f8cc940", "58997": "b37ea7e0b02366aefc3996eb2f5b45400859984b", "59002": "1a66b86d23cfc606ad3ad4185aaec40ee9b822a5", "59004": "72e0994c40fefcca3197008843f2b202ddc42280", "59005": "42d10f7d8215678bb04428f733f9ca5ab992abbb", "59024": "ef3a51cf173c1e6f5ca0cc966a6ba6b00d70924c", "59028": "a7606272bb8a9c8d05448b7d30505822db6af20e", "59048": "70bf1f88ffd6b88acb937a0a69e11e61ceedad3a", "59049": "3dff1b98a78f28c953ae2140b69356b8391e399c", "59072": "2690ecd3b824c2031ccf07731672802e65fd9f87", "59074": "4c565bd476a72987764b712aec475b9a1d10b65f", "59077": "f76d13f7adf928edd94c95522a80aa7a4552a450", "59078": "3b922489dfb0b5a09640d3d14074cbdf51f1ab7e", "59081": "b26825a9c906bb3d7e4f043600c3e25bb1afd6a8", "59105": "35be3a042e38b1ef5de33120e38293540f40d5f5", "59109": "96e124898738f0e1e8a5681eaa5fc2ea69d91711", "59114": "b5edde71c044119fe48a40dcc82833628801d958", "59117": "6d2bf1eac868a6c0cddf27c00af7df87e97b4654", "59118": "31e815f084dc22977c6a2222aa8d4f45bda17188", "59134": "9aa14250cfcc7b9a62c4c41fa00f90e9f1ce4cfc", "59135": "e7a035b41c9640609fd5604311663905e1fc0625", "59136": "413dfe7ba58d0ddac413e350a6961eb831ce759f", "59141": "e33d341aa8423c58ddb3d441955108eefbe12a2e", "59187": "5d4c4b3289b21be8133a9fb367e6260d248b15c1", "59188": "5ee8b5922efdfc41a04e974c4e4d3a5a31909f4c", "59200": "91650477208bea61719d431834b9c1cc64bfd415", "59218": "7e32412fa1d168efdc0911d1f0f911a4a0c2a50a", "59225": "1993d830c14b3b6c81a2ff5ee07e3d25bca424db", "59228": "2ad6b40353bf11270ccb21d07162ecbb064f898a", "59244": "1cda6adab1713e68810e1059127517e146779b74", "59265": "021a32ba040753994c4bc8e0a21fc3ef5a863368", "59267": "93e84eb0608a80c61ebce5904f7307a44c52d5cd", "59289": "c7614919ad570f5990136024cb6ea4e77db6ab7f", "59290": "8501526ca26a80ac1b7866a4c1678fcf0045e971", "59336": "88c7075e82318fcd88936d299f1097214e8831e0", "59339": "1d679954a55b6b718801c7583d34a98cf9486335", "59361": "11f4bbcc95f822383ced835726003c4c73cfe123", "59364": "1282ec7b95e122a71bd62c8570a442d2f32c2edf", "59384": "43ade3c542e1580874f5c637469641def663926b", "59385": "cb58ed20608e26870fd6cd16a8bbbc11e1cc7395", "59389": "0825cf79407310904f45a56916fd8e3b14999040", "59394": "bc6fd81cfbba85b3b7249fb2d3c67abbdff25076", "59395": "9fa2d4aa4683d24937f42d96f7fba4333ee6067a", "59430": "f469375c923d8dc50c6632b21f39b7da3d252548", "59473": "c4325fce8be7af736539de2d5d540c624316dafc", "59478": "a1fbd0066219a7a1d14d4d9024d8aeeb5cb8d51a", "59499": "77cec1d0dcb24f9b8fadd279b4f95486e6599a99", "59504": "fa612beb980f75dbda881a5f503237f4e61dfccc", "59513": "0e775998eba41e6b3d21d1f3387003627ff7e983", "59529": "ad9b01b0072d2fcc2df9fcf511a9f477c5deeb20", "59530": "fb0d2d34e13fd0a6ba6ef343311a3700a2fc6b64", "59543": "8dc90bd6be44d99cb1cf64f1ba550cd19b2317ad", "59547": "4714cfb79f13adfa0beb6e02d12e7233950e5c13", "59560": "6cbd6e48a5b1bf322f7c2eaba07df82783827a60", "59563": "5bfe93281866f0841b36a429f4090c04a0e81d21", "59578": "516fa83e69caf1e68306cfc912a13f36c434d51c", "59597": "96cfbbd82194c02ef4426d4db1cdf1a7b73e340f", "59598": "20358ad1d00438592b54451ddd372fd715e29733", "59623": "19783d7f6d8d389924b276745fa39d1da2bcad09", "59639": "d84d7113cd0f875833b90fc4b525f9828db028a2", "59641": "4c96c4d982f58e74bb1e81f386d45686555f0a55", "59646": "cb088e70756eeaf359387e4864a79ac55b4be160", "59647": "b6e217d99232cdf876615f1ad0db08688b162a52", "59648": "bb4f8eadfd60cdf7882b152abe5a20364ed7461a", "59681": "0b6672b519fd34be633e440739297b07ace87da5", "59691": "1e585d4722f61c16b8f58f3b32eaa605d18dfb3e", "59693": "ddfc09b6d39e56ba3fa072173e3d740fdfc423c3", "59754": "10572076dc34843dd37300cbaa910f537cdda2b8", "59779": "0d77d28d1be6758d8d921068c7d54e32befe11b3", "59803": "d984395370038650573aaa35a0132bb18631bb95", "59804": "5b92c4497fcc6f1df4aac23b9c001ff323ffb421", "59819": "c02515a8cfaa28c47300084b09b0d57798b867dd", "59827": "778ddd09b55708488e2d21e8bda0a2ad5f073b8c", "59828": "126485017c60e249c21dd68c46f70ea7b0584e1e", "59853": "acca30685ef9edb068076991ec6d59cd8ba1e79a", "59859": "a0f1c6de4f463464107ef125bcf9ff187452c425", "59860": "20093a440f8b4ed85e733b652e13f965ba0525ce", "59864": "306b1b6e7e3f56cd8889ee623058f9f08001ce06", "59868": "65b35e5594ff52b4dccea2086e0b5476f124283a", "59872": "c770bc7ede4c22962bacce96bb2388e5df1c47b7", "59900": "69b89ce2e388d81d2fc3c47e2292575c8d971f6f", "59904": "68f89c4b2abeb689d7d8425d1c6d55d4c62e5697", "59930": "9438856b972b13b6eb6b41ec557bb28ad090786e", "59931": "1d3c77133c83da7b773317f4cc362308fd8f01fd", "59940": "cb183794bcfcddebf443a7a91764a60fa230f09d", "59945": "ce1e53f065e7a5fdac53ddbfad3c2306f57a1a71", "59963": "0e22875c62b221dceeca2c79150daf43113e7d7c", "59967": "636221ff35c78b980f828a285d0c552fac77aaba", "59999": "cd6fe4b61a62745e12a5ae1703476f6d0ac84435", "60000": "9b22c6a41a65c59d9513e062f6dfe25e7c2e22bf", "60002": "7485df5e724ad6d9df0e0a8acaa5d861d9a35077", "60028": "1c952df73f11d7251ab0b974840862b88540fcbd", "60039": "244ffa6609bbe43ad2f283332dc55f61287e3d8d", "60044": "9640007d857774940ed05b22d1f4ebed2fe11367", "60048": "d6417fbb2972861e7f472537bb9cd55ed01afd00", "60058": "05a7ca5c054101ed648c4372887e9bf3046686b0", "60070": "e9f44d0b4497650df2f2f62c39fd1ebc940456fc", "60081": "a3c247b68bc409378ae34cafcf3eebd465126aad", "60085": "8b47ec3e9d759dbbc4fddd9de4ca911d6a9b06a5", "60086": "d7311133f29df612113592f03b0e8b415bb4fd75", "60089": "7596558255455a4bb5264f31860776b3b604dde9", "60096": "3f305ce157071f9667a9c9dc395eeee537d1f939", "60102": "f9e030b57623bebdc2efa7f297c1b5ede08fcebf", "60125": "a8ddd0d457f9e34280b1cd64041ac90a32edbeb7", "60141": "88b55b932a70056ab567524c79374533d9c0208e", "60142": "872c9a890a06f7807aabf61c5436fbab8163e782", "60162": "291d886c68a48c07ea2ae08175bc09dee5abadfd", "60166": "9c85628d6728e8d66982344d4ac6dcab77a5a5e5", "60167": "73c7741b2ab079d3c59f6f913019d8f2c9df4b68", "60168": "75eb3a954f5af2202c6647cfa336ada8c94314b2", "60170": "818fb23eb0426cbae0f4e7d377171823062e3b38", "60173": "8c8b5878c092e70754ff02306106818b07b91159", "60184": "0389684f2e8aac00a8353f49c41bb8b1912f0951", "60191": "2586bae98d76d12d98d2b21b33f9931df9dccac4", "60195": "65779e1a5332741912f855187c07e40f9c923a5e", "60205": "b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9", "60219": "63ab534ebc9bb8fa47ca80aea5a1b0eca743fb9e", "60224": "08534bbcf86e4655be10fbb8f5636e49021d5fee", "60228": "e007bbe0872d1477df8110b5f1a713a58e2ad41a", "60239": "1d87b1e2dd84011047ebc85f781a792d9fcc98ca", "60241": "f481d185b50a2841e73734d42fda88fe02a682a9", "60242": "c6a684fee2a2c5e7a18c4af8cada5669b1ad321f", "60251": "d3ae62701d21bb07c941609d0fd0e045e55ff809", "60266": "2443f31338f0448fffeb616edf099ba675db34d1", "60272": "7be4fe6618e12dbec73927b770e2df252682a115", "60274": "b6fdf957407bb73184e3117c47e857e46f06f9d4", "60280": "116722f31a57dac8c7e9f30c6b46c034326958bd", "60316": "8a7e6b4c4197e9fef8459ccad732de218b75d448", "60318": "64d28fe0534f6993695d11244ea740f783958dc8", "60375": "c3f0b4eacc79f0a533e79d474a5ec0081ee38fb1", "60378": "486ea02607364e987cb331e482a8cefaa70b1f61", "60382": "bdac8f1c7b7d1e29338676442138aaf39a2ab27b", "60383": "f39379ed80a20b32e3edafc4b1c015ce7de341ce", "60387": "77ebac76a006149394832d50e85fcaa64df07314", "60388": "8a56f3b5ebebc595cf82498d1520f73a83200275", "60392": "d02120c1ec491fe9322f4ad35fc8040b6b6a191d", "60396": "66909e45463604e8c9decf805e31d8de190de384", "60403": "ba60896b775fcf62d7ca9746787c5c90d1e86ebc", "60404": "542a1758e517c3b5e95e480dcd49b9b24a01f191", "60417": "d11fed2772e205e62ca2bf8222d78d28c2fb08d1", "60419": "f09b26cfd7ecaf38423d89c08c6e95865cc167e4", "60430": "5d8e1565bf47f06fe00eebf45617df0472dd539f", "60435": "6daf556517f9fa61a7805fe93d8a366688781617", "60458": "19302ca22934f2f806526102b0c73f63a07f2a42", "60460": "16143cb5ca54fa529684a7b2db704d5463d72dfc", "60461": "a8eec2f93992cbee6eb666d9dc461ea30a56898b", "60467": "7e91e0eaf9c0500a27dae686ebe86d9998ef9c98", "60471": "5db74b03abdbd8267503e2635f7ea95523810879", "60477": "5b973f90308956c7281eab0f4f143b70ab016a98", "60478": "222a9404ac8a62febe5420062f01508793f7a70f", "60485": "a4a5428ff809030b0fb1b687439bec44a8d33bad", "60487": "21fe47c6b0b39379b8f2bb00318467a3100978a7", "60496": "a31d771e5015348b5d86a01af8f50737fe7f9a97", "60497": "1d5aee9749bf236362750f7ed5d8e95012c83fba", "60498": "8aef2dbd87fdd88f65d1639ac0ec447ca6d17c50", "60518": "22c57c73758503b2ae857258549232351cca3861", "60542": "009d0031bec7222ffa472e52148a2b4e441cd3a5", "60544": "180c3d05964c6bdb8e6cfb66c27d0369c1759409", "60546": "8203f62e5e606de01830fd452e75484be4af922e", "60575": "9d52d0debe35247f5438671ba4a81b2fdb3c2a67", "60576": "777a76d3cb06da144d1b13e2183353f34a6d09f8", "60583": "b941a599fd5b25aa06de12c7cb9de8e08ec928e0", "60584": "d99270537eb946ff33868a701fc208a722a4035d", "60586": "09bc7f12fab8b82e8091dac537cbef28269990a0", "60587": "8c94b6428b4d5783077cea1afe9fcbad2be3ec91", "60599": "6f48a668c9e2b68995afb35c1dcb7e3f9368d6d6", "60609": "46921d2880a7b3d81b92e5ae7b147e955ef78b71", "60618": "c2554ab3f3efb5d0bd6ae9603b7bd9bdc0f18477", "60621": "dc138bcc3af8e2696169caeee5a2010b0c934686", "60629": "85810bb51de460e5d27ea24b22ed80b738366602", "60634": "1cce26960daeab83ab63e41581985b1db9615a40", "60643": "fb62a49967aeeb045871d94fa616fa4a63a38dde", "60676": "1901316d407a6a3880fe5ee5d44a8b365ff7f4d0", "60690": "276f6376c7fce76704d34de60eecb61f3313d551", "60691": "0666d481dd1831d731d8b3ef740c722d715d0394", "60701": "591a62f0f2c3e6714a8ba65ec04a10ac9d6e71c5", "60706": "04cb4be755ef20a41317526f998ea7f987ebccef", "60707": "145d9d410e2e7daa4f08fd5bfec02d4fef293372", "60713": "e60abb1d4f979623a3bec07e5153a5804ad05e94", "60714": "cc48fad3149e475594b12163a523e132049b7c10", "60730": "0b42f52d9128d6519147d86643c45ff74dfff558", "60746": "226b942f0748819d5d2d723b91591fed4975961c", "60767": "15fb498a27ba3f6e56fb932fdc731d75267198c5", "60775": "8dce5aa34bdcc3ed73ed361233325aa3a8f0b342", "60786": "418073d7602ff9382140004ea1193e74fca93d90", "60789": "bbc9bde9799fde640fe586cc815529b6e96e7cbc", "60796": "278c59b8a926203f3f089a50b2fba1b739375625", "60797": "6908bc856dca372d888590cafb4166297fbf0951", "60846": "e0ef1da13e2ab2a77866c05246f73c871ca9388c", "60847": "94e73d16b9ceb7d8fad6f036470878818567b8b1", "60852": "771054cbb4e255c4e5a0f9fe85f1e8f79e4598e3", "60853": "fa01809088fa7bbb26078eb6fdd7bcddb488076b", "60854": "3a6f2921f33642dfc69b3239328d4e49d057d43b", "60856": "3d2bf2320423c7022da20a6035c5f5b160a7505c", "60857": "b561fee8a4810924f9481a5d78a83436b544a672", "60876": "f6fe02846c7945136a038bb865219a6281e4c0d7", "60939": "68e96262232cbe3a6fccfc510a2604aa837fb440", "61012": "56047a94233f3324c841dde36e474225fd5e407a", "61028": "eddf8b8dd4b6696cd3f86b1f8d21a682d8a6fe55", "61034": "b367425da084b81917e1e586fa87667a0b606274", "61049": "5882a087e1d44288524d422a441195f52e3143c6", "61055": "519443a4108742027bd6f03e4bcbc36dd4355e01", "61083": "354254033088a8cc39aa44ca5407ba67529f882d"}, "revision_to_date": {"221": 1186906801000, "327": 1189257301000, "576": 1191596284000, "626": 1192918201000, "634": 1193708806000, "647": 1195256582000, "689": 1196948647000, "715": 1198274448000, "757": 1199456458000, "766": 1199660205000, "865": 1201473035000, "993": 1204836347000, "1164": 1209242958000, "1223": 1211648372000, "1367": 1215459511000, "1496": 1216756221000, "1657": 1218985017000, "1903": 1226955257000, "1910": 1227026177000, "1913": 1227128164000, "2039": 1234166288000, "2079": 1236804125000, "2128": 1238384468000, "2132": 1238889910000, "2263": 1245899178000, "2275": 1245955512000, "2298": 1246977976000, "2322": 1247333707000, "2336": 1247701259000, "2338": 1247779001000, "2747": 1261272101000, "2748": 1261342300000, "2813": 1268858331000, "7080": 1307855759000, "7117": 1308111488000, "7332": 1309219432000, "7834": 1311405386000, "7918": 1311984615000, "15796": 1349762332000, "15892": 1350440998000, "21286": 1373162981000, "21505": 1373690695000, "24122": 1385964383000, "24189": 1386543414000, "24279": 1387128071000, "25168": 1392645779000, "25234": 1393096359000, "28879": 1415306726000, "28917": 1415913365000, "29003": 1416503374000, "32218": 1441312414000, "34135": 1456504641000, "34273": 1457462133000, "40557": 1499028114000, "40651": 1499296404000, "41078": 1500660842000, "41185": 1501109172000, "46289": 1530565453000, "46334": 1531153676000, "47423": 1536362642000, "47513": 1536951062000, "51478": 1554152380000, "51602": 1554410956000, "51814": 1554856165000, "56572": 1573518776000, "56574": 1573569190000, "56578": 1573593073000, "56587": 1573654745000, "56588": 1573664309000, "56598": 1573686462000, "56601": 1573837231000, "56607": 1573864483000, "56608": 1573865474000, "56610": 1573866716000, "56611": 1573893981000, "56619": 1573915678000, "56625": 1574011602000, "56633": 1574063878000, "56646": 1574179995000, "56675": 1574381105000, "56676": 1574386710000, "56679": 1574441916000, "56680": 1574470267000, "56689": 1574696686000, "56690": 1574699201000, "56710": 1574814557000, "56712": 1574821332000, "56721": 1574893626000, "56726": 1575046103000, "56729": 1575106095000, "56732": 1575201044000, "56736": 1575242382000, "56742": 1575303253000, "56744": 1575308653000, "56756": 1575351666000, "56770": 1575449057000, "56825": 1575737946000, "56827": 1575770770000, "56828": 1575786377000, "56842": 1575881894000, "56851": 1576069782000, "56855": 1576089783000, "56857": 1576139999000, "56867": 1576278760000, "56868": 1576282429000, "56869": 1576289865000, "56881": 1576366111000, "56899": 1576531262000, "56900": 1576532107000, "56905": 1576576241000, "56920": 1576605656000, "56924": 1576628308000, "56933": 1576687824000, "56942": 1576713314000, "56943": 1576717633000, "56956": 1576802347000, "56958": 1576813909000, "56968": 1576855338000, "56971": 1576882794000, "56972": 1576885251000, "56974": 1576914420000, "56980": 1576942558000, "56985": 1576952934000, "57039": 1577059666000, "57040": 1577060282000, "57047": 1577099806000, "57057": 1577124083000, "57064": 1577146573000, "57065": 1577148287000, "57067": 1577176853000, "57076": 1577195862000, "57086": 1577215543000, "57094": 1577249453000, "57106": 1577293156000, "57109": 1577301306000, "57129": 1577360276000, "57130": 1577360482000, "57131": 1577362433000, "57151": 1577448544000, "57208": 1577577735000, "57233": 1577635913000, "57248": 1577649399000, "57268": 1577692290000, "57273": 1577702071000, "57274": 1577704080000, "57278": 1577718763000, "57279": 1577724126000, "57308": 1577756545000, "57309": 1577758069000, "57310": 1577759871000, "57311": 1577760242000, "57318": 1577805458000, "57332": 1577822840000, "57353": 1577952368000, "57354": 1577952782000, "57355": 1577954792000, "57367": 1577981889000, "57370": 1577985836000, "57379": 1578019747000, "57380": 1578019806000, "57381": 1578021279000, "57428": 1578069653000, "57429": 1578070589000, "57437": 1578102081000, "57451": 1578107168000, "57462": 1578140693000, "57466": 1578143618000, "57468": 1578145943000, "57471": 1578152340000, "57473": 1578155268000, "57482": 1578173017000, "57488": 1578190977000, "57489": 1578191045000, "57509": 1578206365000, "57519": 1578236762000, "57527": 1578251257000, "57563": 1578339002000, "57572": 1578349330000, "57573": 1578349535000, "57592": 1578389897000, "57603": 1578410549000, "57606": 1578411754000, "57608": 1578415297000, "57632": 1578430547000, "57633": 1578430770000, "57656": 1578497048000, "57657": 1578498432000, "57664": 1578513733000, "57675": 1578540929000, "57679": 1578558005000, "57690": 1578573063000, "57707": 1578598145000, "57716": 1578625423000, "57719": 1578640739000, "57728": 1578687904000, "57738": 1578718823000, "57741": 1578722785000, "57743": 1578731008000, "57748": 1578745993000, "57764": 1578764566000, "57775": 1578778809000, "57776": 1578784651000, "57811": 1578854121000, "57825": 1578870073000, "57839": 1578893962000, "57857": 1578917697000, "57860": 1578919869000, "57899": 1578966333000, "57918": 1579000455000, "57932": 1579034516000, "57947": 1579086387000, "57951": 1579095817000, "57966": 1579117258000, "57970": 1579136469000, "57980": 1579162051000, "57985": 1579171674000, "57995": 1579201935000, "58001": 1579212946000, "58006": 1579240957000, "58008": 1579244454000, "58014": 1579252780000, "58020": 1579280116000, "58104": 1579317067000, "58114": 1579360407000, "58115": 1579362815000, "58136": 1579428263000, "58145": 1579435262000, "58149": 1579440750000, "58150": 1579441700000, "58163": 1579499681000, "58172": 1579517551000, "58175": 1579525273000, "58189": 1579564243000, "58190": 1579564313000, "58192": 1579577815000, "58205": 1579616427000, "58206": 1579617282000, "58207": 1579617804000, "58209": 1579621465000, "58210": 1579622178000, "58220": 1579627589000, "58232": 1579642101000, "58236": 1579650372000, "58249": 1579681690000, "58267": 1579730201000, "58271": 1579737773000, "58272": 1579738254000, "58273": 1579739620000, "58274": 1579740863000, "58289": 1579806706000, "58295": 1579827733000, "58319": 1579888019000, "58327": 1579904972000, "58329": 1579911726000, "58330": 1579912897000, "58332": 1579916149000, "58333": 1579916216000, "58337": 1579936836000, "58342": 1579956125000, "58376": 1580045470000, "58377": 1580045598000, "58380": 1580055366000, "58392": 1580072186000, "58393": 1580072964000, "58398": 1580116259000, "58412": 1580134352000, "58431": 1580148903000, "58434": 1580151555000, "58458": 1580228188000, "58461": 1580232651000, "58464": 1580244428000, "58466": 1580255333000, "58467": 1580256163000, "58468": 1580281966000, "58472": 1580292622000, "58473": 1580298263000, "58481": 1580321101000, "58488": 1580369071000, "58517": 1580479309000, "58519": 1580491043000, "58553": 1580582785000, "58570": 1580647774000, "58574": 1580671543000, "58581": 1580724894000, "58585": 1580740474000, "58586": 1580764066000, "58640": 1580777218000, "58643": 1580813059000, "58651": 1580842434000, "58655": 1580859721000, "58680": 1580926176000, "58681": 1580926685000, "58682": 1580927048000, "58690": 1580938752000, "58691": 1580939641000, "58697": 1580941825000, "58706": 1580959250000, "58713": 1580990875000, "58730": 1581033402000, "58731": 1581035448000, "58732": 1581041677000, "58740": 1581072603000, "58744": 1581080207000, "58745": 1581084383000, "58775": 1581160525000, "58776": 1581160587000, "58781": 1581166903000, "58784": 1581179035000, "58786": 1581204478000, "58792": 1581263924000, "58796": 1581280566000, "58806": 1581322285000, "58818": 1581361028000, "58838": 1581412553000, "58839": 1581418994000, "58843": 1581438630000, "58857": 1581519292000, "58866": 1581542637000, "58880": 1581584781000, "58882": 1581594497000, "58894": 1581629068000, "58904": 1581665482000, "58905": 1581666693000, "58907": 1581674378000, "58908": 1581674438000, "58909": 1581677518000, "58914": 1581698066000, "58918": 1581705544000, "58920": 1581715333000, "58923": 1581764103000, "58925": 1581766440000, "58949": 1581856393000, "58950": 1581858117000, "58954": 1581872081000, "58972": 1581954030000, "58986": 1581992520000, "58994": 1582030349000, "58997": 1582038159000, "59002": 1582045989000, "59004": 1582053794000, "59005": 1582078598000, "59024": 1582145839000, "59028": 1582166324000, "59048": 1582247479000, "59049": 1582254256000, "59072": 1582318115000, "59074": 1582330057000, "59077": 1582331908000, "59078": 1582353108000, "59081": 1582365774000, "59105": 1582401712000, "59109": 1582447948000, "59114": 1582463669000, "59117": 1582478601000, "59118": 1582480454000, "59134": 1582575885000, "59135": 1582576376000, "59136": 1582577365000, "59141": 1582599587000, "59187": 1582704313000, "59188": 1582708923000, "59200": 1582763203000, "59218": 1582837159000, "59225": 1582880596000, "59228": 1582894885000, "59244": 1583009685000, "59265": 1583083608000, "59267": 1583091887000, "59289": 1583165456000, "59290": 1583165523000, "59336": 1583256421000, "59339": 1583257993000, "59361": 1583277120000, "59364": 1583285131000, "59384": 1583347798000, "59385": 1583348200000, "59389": 1583360813000, "59394": 1583405275000, "59395": 1583405314000, "59430": 1583524384000, "59473": 1583672870000, "59478": 1583757641000, "59499": 1583793846000, "59504": 1583808458000, "59513": 1583850861000, "59529": 1583870118000, "59530": 1583870231000, "59543": 1583894579000, "59547": 1583906030000, "59560": 1583932198000, "59563": 1583945364000, "59578": 1583969306000, "59597": 1584009769000, "59598": 1584009875000, "59623": 1584071712000, "59639": 1584107803000, "59641": 1584110522000, "59646": 1584114224000, "59647": 1584114586000, "59648": 1584114914000, "59681": 1584206183000, "59691": 1584224327000, "59693": 1584227211000, "59754": 1584400424000, "59779": 1584484136000, "59803": 1584582458000, "59804": 1584583909000, "59819": 1584649562000, "59827": 1584666908000, "59828": 1584668407000, "59853": 1584800202000, "59859": 1584812643000, "59860": 1584812945000, "59864": 1584817468000, "59868": 1584831779000, "59872": 1584848130000, "59900": 1584917425000, "59904": 1584945043000, "59930": 1585024209000, "59931": 1585024234000, "59940": 1585042063000, "59945": 1585044198000, "59963": 1585070705000, "59967": 1585075012000, "59999": 1585140504000, "60000": 1585140655000, "60002": 1585142898000, "60028": 1585223142000, "60039": 1585270555000, "60044": 1585292725000, "60048": 1585304229000, "60058": 1585322787000, "60070": 1585341313000, "60081": 1585372427000, "60085": 1585387811000, "60086": 1585388417000, "60089": 1585392120000, "60096": 1585406356000, "60102": 1585414193000, "60125": 1585497902000, "60141": 1585544143000, "60142": 1585544200000, "60162": 1585580027000, "60166": 1585588173000, "60167": 1585593562000, "60168": 1585613958000, "60170": 1585618475000, "60173": 1585631150000, "60184": 1585652699000, "60191": 1585659522000, "60195": 1585663931000, "60205": 1585682333000, "60219": 1585694929000, "60224": 1585739643000, "60228": 1585762540000, "60239": 1585778234000, "60241": 1585783291000, "60242": 1585785010000, "60251": 1585823520000, "60266": 1585932503000, "60272": 1585950162000, "60274": 1585986990000, "60280": 1586054375000, "60316": 1586276265000, "60318": 1586367612000, "60375": 1586441049000, "60378": 1586446123000, "60382": 1586466155000, "60383": 1586497015000, "60387": 1586545962000, "60388": 1586549054000, "60392": 1586603027000, "60396": 1586631349000, "60403": 1586688192000, "60404": 1586688277000, "60417": 1586760807000, "60419": 1586766025000, "60430": 1586817616000, "60435": 1586844644000, "60458": 1586982730000, "60460": 1587000236000, "60461": 1587018489000, "60467": 1587044614000, "60471": 1587054855000, "60477": 1587121564000, "60478": 1587121992000, "60485": 1587143128000, "60487": 1587151750000, "60496": 1587215449000, "60497": 1587215559000, "60498": 1587228327000, "60518": 1587346087000, "60542": 1587395750000, "60544": 1587417800000, "60546": 1587425902000, "60575": 1587570679000, "60576": 1587587553000, "60583": 1587632375000, "60584": 1587645026000, "60586": 1587656131000, "60587": 1587658383000, "60599": 1587796431000, "60609": 1587848620000, "60618": 1587891026000, "60621": 1587904176000, "60629": 1587922040000, "60634": 1587939523000, "60643": 1587968099000, "60676": 1588047463000, "60690": 1588100339000, "60691": 1588104811000, "60701": 1588178052000, "60706": 1588190339000, "60707": 1588190632000, "60713": 1588204035000, "60714": 1588207373000, "60730": 1588237330000, "60746": 1588298453000, "60767": 1588373277000, "60775": 1588461344000, "60786": 1588501664000, "60789": 1588504051000, "60796": 1588516322000, "60797": 1588516360000, "60846": 1588584230000, "60847": 1588584243000, "60852": 1588600790000, "60853": 1588601273000, "60854": 1588601300000, "60856": 1588611122000, "60857": 1588611133000, "60876": 1588676631000, "60939": 1588935068000, "61012": 1589074097000, "61028": 1589102364000, "61034": 1589112193000, "61049": 1589130605000, "61055": 1589151429000, "61083": 1589229779000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz"], "machine": ["unbuntu"], "num_cpu": ["16"], "os": ["Linux 5.3.0-51-generic"], "ram": ["32805520"], "python": ["3.7"], "fastcache": [""], "mpmath": [""], "numpy": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz", "machine": "unbuntu", "num_cpu": "16", "os": "Linux 5.3.0-51-generic", "ram": "32805520", "python": "3.7", "fastcache": "", "mpmath": "", "numpy": "", "branch": "master"}], "benchmarks": {"baseline.TimeBaseline.time_loop10": {"code": "class TimeBaseline:\n    def time_loop10(self):\n        for i in range(10):\n            pass", "min_run_count": 2, "name": "baseline.TimeBaseline.time_loop10", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ee6edcfa2c40f45811e3b88dc30f8f4499e8e2743f95c6384751b9e66eeb4118", "warmup_time": -1}, "baseline.TimeBaseline.time_loop10000000": {"code": "class TimeBaseline:\n    def time_loop10000000(self):\n        for i in range(10000000):\n            pass", "min_run_count": 2, "name": "baseline.TimeBaseline.time_loop10000000", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca11b795d6d20c54366e6d7d797ff942c6c2bd359cc3edc5594eda4514d5567e", "warmup_time": -1}, "baseline.TimeBaseline.time_noop": {"code": "class TimeBaseline:\n    def time_noop(self):\n        pass", "min_run_count": 2, "name": "baseline.TimeBaseline.time_noop", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0c35da5a68698549eeecc555e883d44218acac81aaa33926f60811a731327efd", "warmup_time": -1}, "baseline.TimeBasicGCD.time_gcd": {"code": "class TimeBasicGCD:\n    def time_gcd(self):\n        g = gcd(self.a, self.b)\n        assert g == self.result\n\n    def setup(self):\n        self.a = 2**20*3**30\n        self.b = 2**30*3**20\n        self.result = 2**20*3**20", "min_run_count": 2, "name": "baseline.TimeBasicGCD.time_gcd", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "68a70bdc6fe7a5154ee37284f83c7b0385758c8482dbbb51162240d8e5aec10b", "warmup_time": -1}, "core.arit.Time_Arit.time_Add_1x": {"code": "class Time_Arit:\n    def time_Add_1x(self):\n        1 + x", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Add_1x", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6bbb099bc9f5b2e2941ba09cbb423c9f707998c0c75ecb88deccc4cf7db1f30c", "warmup_time": -1}, "core.arit.Time_Arit.time_Add_x05": {"code": "class Time_Arit:\n    def time_Add_x05(self):\n        x + 0.5", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Add_x05", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e36ed714a03cc713d9a7f655dd2ca89be535390b6e1dea82ffcd0818426b9490", "warmup_time": -1}, "core.arit.Time_Arit.time_Add_x1": {"code": "class Time_Arit:\n    def time_Add_x1(self):\n        x + 1", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Add_x1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f0b57176f129fe92de31a98e1281edc51664eaa3b91f9c0836fc1ff30c602a0d", "warmup_time": -1}, "core.arit.Time_Arit.time_Add_xy": {"code": "class Time_Arit:\n    def time_Add_xy(self):\n        x + y", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Add_xy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "82f209efebf4cb5019ab677b735bcd75a64ff681916d6de101fafade1d204689", "warmup_time": -1}, "core.arit.Time_Arit.time_Add_xyz": {"code": "class Time_Arit:\n    def time_Add_xyz(self):\n        Add(*[x, y, z])", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Add_xyz", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "455de2a4d335b8ac2e243161f38f62c0e7590e0bb67e335d20242e69036137cd", "warmup_time": -1}, "core.arit.Time_Arit.time_Div_2y": {"code": "class Time_Arit:\n    def time_Div_2y(self):\n        2/y", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Div_2y", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "172707be751ada73a4f21a2d7cb3ae97e9a3d806f63e0a7921c85123212fbd66", "warmup_time": -1}, "core.arit.Time_Arit.time_Div_xy": {"code": "class Time_Arit:\n    def time_Div_xy(self):\n        x/y", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Div_xy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9cdb5ba9f353081a21344a690fc10c1100d0ee012e24537bb3276bfa78cbfaff", "warmup_time": -1}, "core.arit.Time_Arit.time_Mul_xy": {"code": "class Time_Arit:\n    def time_Mul_xy(self):\n        x*y", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Mul_xy", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0a44439a67bff833662f0f069413a5220a28a40aa57fd341448c204a34ed6d79", "warmup_time": -1}, "core.arit.Time_Arit.time_Mul_xyz": {"code": "class Time_Arit:\n    def time_Mul_xyz(self):\n        Mul(*[x, y, z])", "min_run_count": 2, "name": "core.arit.Time_Arit.time_Mul_xyz", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bece49bfc8c9c911bd87383777b3bbfe9680ab2b0df7d07e1d09a6eb9596cdc5", "warmup_time": -1}, "core.arit.Time_Arit.time_mod_pow": {"code": "class Time_Arit:\n    def time_mod_pow(self):\n        for x, y, z in [(4, 13, 497), (4, -3, 497), (3.2, 2.1, 1.9)]:\n            pow(S(x), y, z)\n            pow(S(x), S(y), z)\n            pow(S(x), y, S(z))\n            pow(S(x), S(y), S(z))", "min_run_count": 2, "name": "core.arit.Time_Arit.time_mod_pow", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "228d58d70f8a11b3df5ba5f21d4f07ad1cde31afc206b42680a233d5148bf69d", "warmup_time": -1}, "core.arit.Time_Arit.time_neg": {"code": "class Time_Arit:\n    def time_neg(self):\n        -x", "min_run_count": 2, "name": "core.arit.Time_Arit.time_neg", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6aa971ace2562c283fde39227f2706c1614aebdfcf5220ee8bc834ffca3ffa2a", "warmup_time": -1}, "core.arit.Time_Arit.time_pow100": {"code": "class Time_Arit:\n    def time_pow100(self):\n        Pow(x, 100)", "min_run_count": 2, "name": "core.arit.Time_Arit.time_pow100", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ffc15ca21972502f5058bb298eb7fcb7501670114382bf2fe06401448c242064", "warmup_time": -1}, "core.arit.Time_Arit.time_pow2": {"code": "class Time_Arit:\n    def time_pow2(self):\n        Pow(x, 2)", "min_run_count": 2, "name": "core.arit.Time_Arit.time_pow2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "af864a2b0704e3e5457681459d9dbff3dda3c01ed87a2fe94bc1b03b0409a40c", "warmup_time": -1}, "core.arit.Time_Arit.time_pow_im": {"code": "class Time_Arit:\n    def time_pow_im(self):\n        (2*x*I)**(7/3)", "min_run_count": 2, "name": "core.arit.Time_Arit.time_pow_im", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "83cd8cde0d557bbde77743bbfb4089bdb45b3ca98c0acf244d0053b8e56f72cf", "warmup_time": -1}, "core.arit.Time_assumption.time_Add_Mul_is_finite": {"code": "class Time_assumption:\n    def time_Add_Mul_is_finite(self):\n        sin(self.x_f).is_finite\n        (self.x_f*sin(self.x_f)).is_finite\n        (sin(self.x_f) - 67).is_finite\n\n    def setup(self):\n        self.ncx = Symbol(\"x\", commutative=False)\n        self.ncy = Symbol(\"y\", commutative=False)\n        self.k_i = Symbol('k', integer=True)\n        self.x_f = Symbol('x', extended_real=True, finite=False)", "min_run_count": 2, "name": "core.arit.Time_assumption.time_Add_Mul_is_finite", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d65d200d6877a639fdf11fa823a64fbaacaebc8b5ee048d941b4f585fd05ea52", "warmup_time": -1}, "core.arit.Time_assumption.time_Add_Mul_is_integer": {"code": "class Time_assumption:\n    def time_Add_Mul_is_integer(self):\n        (self.k_i + 1).is_integer\n        (2*self.k_i).is_integer\n        (self.k_i/3).is_integer\n\n    def setup(self):\n        self.ncx = Symbol(\"x\", commutative=False)\n        self.ncy = Symbol(\"y\", commutative=False)\n        self.k_i = Symbol('k', integer=True)\n        self.x_f = Symbol('x', extended_real=True, finite=False)", "min_run_count": 2, "name": "core.arit.Time_assumption.time_Add_Mul_is_integer", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "17c3848fd4e5515d14cae403882b2cf284f7f55e66469b1d54deabf8a6b4dd6d", "warmup_time": -1}, "core.arit.Time_assumption.time_ncmul": {"code": "class Time_assumption:\n    def time_ncmul(self):\n        self.ncx*self.ncy != self.ncy*self.ncx\n        self.ncx*self.ncy*3 == 3*self.ncx*self.ncy\n\n    def setup(self):\n        self.ncx = Symbol(\"x\", commutative=False)\n        self.ncy = Symbol(\"y\", commutative=False)\n        self.k_i = Symbol('k', integer=True)\n        self.x_f = Symbol('x', extended_real=True, finite=False)", "min_run_count": 2, "name": "core.arit.Time_assumption.time_ncmul", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63abdce43b7835ccfc70bbb29189af016d7791728157e1dde043a32ea53be437", "warmup_time": -1}, "core.arit.Time_assumption.time_ncpow": {"code": "class Time_assumption:\n    def time_ncpow(self):\n        (x**2)*(y**2) != (y**2)*(x**2)\n        2**x*2**(2*x) == 2**(3*x)\n\n    def setup(self):\n        self.ncx = Symbol(\"x\", commutative=False)\n        self.ncy = Symbol(\"y\", commutative=False)\n        self.k_i = Symbol('k', integer=True)\n        self.x_f = Symbol('x', extended_real=True, finite=False)", "min_run_count": 2, "name": "core.arit.Time_assumption.time_ncpow", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "089f482489e7d06c1fd6a5aa754fb35504fd5ee5f478599cf2e64a9d05be4c09", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_arit": {"code": "class TimeExpand:\n    def time_expand_arit(self):\n        ((x + y)*z).expand()\n        ((x + z)*(x + y)*(y + z)).expand()", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_arit", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a227bf4d13cd2b0f8c7106d6a8237513814c0373e28c69a88e9c9650c2db1df7", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_complex_number_1": {"code": "class TimeExpand:\n    def time_expand_complex_number_1(self):\n        ((2 + 3*I)**1000).expand(complex=True)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_complex_number_1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d4b78789412f6402a2a3b686be23ae70c7b5e12aaf74b6bec4b04003cba2d8c6", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_complex_number_2": {"code": "class TimeExpand:\n    def time_expand_complex_number_2(self):\n        ((2 + 3*I/4)**1000).expand(complex=True)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_complex_number_2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "77d0ad0f12b3e221846b2e1ae47e075e81fda13274793c7c209ded6e21628f6e", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_frac": {"code": "class TimeExpand:\n    def time_expand_frac(self):\n        expand((x + y)*y/x/(x + 1), frac=True)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_frac", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "841c694a5330efd5c4a0e4dcfcc29cefc9709d6581b3bafdb0ae9540ccb05b9e", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_log": {"code": "class TimeExpand:\n    def time_expand_log(self):\n        expand(log(t**2) - log(t**2/4) - 2*log(2))", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_log", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3227e39226db7dfceb6d534df29926a83c3ab419e57263ea8d0211618df578aa", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_modulus": {"code": "class TimeExpand:\n    def time_expand_modulus(self):\n        ((x + y)**11).expand(modulus=11)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_modulus", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "49706f3b33fc2c266519efc0db35f8acbcf1f7681c4b4c9830fd11ffd08cf3e0", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_negative_integers_powers": {"code": "class TimeExpand:\n    def time_expand_negative_integers_powers(self):\n        ((x + y)**(-2)).expand()\n        ((x + y)**(-3)).expand(multinomial=False)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_negative_integers_powers", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f008d1a035451754f8ccad3bf3807b55135f98c48ea055ce371b491013676221", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_no_log": {"code": "class TimeExpand:\n    def time_expand_no_log(self):\n        ((1 + log(x**4))**2).expand(log=False)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_no_log", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3272259982555fa280459b4ca47588374a04e0a7f8305b419ff758004a1239a6", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_no_multinomial": {"code": "class TimeExpand:\n    def time_expand_no_multinomial(self):\n        ((1 + x)*(1 + (1 + x)**4)).expand(multinomial=False)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_no_multinomial", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "178b32bbf06fd8b410b8b1e52a80b690a03c2544fff3193130e1079be2a424bd", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_non_commutative": {"code": "class TimeExpand:\n    def time_expand_non_commutative(self):\n        (C*(A + B)).expand()\n        ((x*A*B*A**-1)**2).expand()", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_non_commutative", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "727cbe367c1463ab35b0dfee1c769b0f1f0092e6b22c8a373ce82a748f5ef07d", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_nothing_todo": {"code": "class TimeExpand:\n    def time_expand_nothing_todo(self):\n        p.expand(self)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_nothing_todo", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "318f239a84a65d97d68999d82476b7eaa0c9b142d9dc785fa28582c8338867ae", "warmup_time": -1}, "core.expand.TimeExpand.time_expand_power_base": {"code": "class TimeExpand:\n    def time_expand_power_base(self):\n        expand_power_base((x*y*z)**4)\n        expand_power_base((x*y*z)**x, force=True)", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expand_power_base", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "91a589c7f4b3135617fa8fb154ec7c2ffd36bf98cb5ea915a220e82785dd6dd8", "warmup_time": -1}, "core.expand.TimeExpand.time_expnad_radicals": {"code": "class TimeExpand:\n    def time_expnad_radicals(self):\n        (((x+ y)**R(1, 2))**3).expand()\n        (1/((x+ y)**R(1, 2))**3).expand()", "min_run_count": 2, "name": "core.expand.TimeExpand.time_expnad_radicals", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d0569f2f58914075b4179db35da817d12e572717f30a591f0afb77c3d2044b46", "warmup_time": -1}, "cse.TimeCSE.time_cse": {"code": "class TimeCSE:\n    def time_cse(self, nexprs_nterms):\n        sp.cse(self.exprs)\n\n    def setup(self, nexprs_nterms):\n        self.args, self.exprs = _get_args_exprs(*nexprs_nterms)", "min_run_count": 2, "name": "cse.TimeCSE.time_cse", "number": 0, "param_names": ["param1"], "params": [["(2, 8)", "(3, 8)", "(4, 8)", "(2, 9)", "(2, 10)", "(2, 11)"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c780a139e36e04ab333c396bfc4ec1c9f0fea9b296d2d39656c624046cfebf99", "warmup_time": -1}, "dsolve.TimeDsolve01.time_dsolve": {"code": "class TimeDsolve01:\n    def time_dsolve(self):\n        t, y, y0, k = self.params\n        dsolve(self.ode, y[1](t))\n\n    def setup(self):\n        self.ode, self.params = _make_ode_01()", "min_run_count": 2, "name": "dsolve.TimeDsolve01.time_dsolve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "21017f3497a17fd0bc8aa5d267ca5a80499b30b48d0521b7df365b0775b46cde", "warmup_time": -1}, "integrate.TimeIntegration01.time_doit": {"code": "class TimeIntegration01:\n    def time_doit(self):\n        self.values['time_doit'] = self.integral.doit()\n\n    def setup(self):\n        self.integral, self.params = _make_integral_01()\n        self.values = {}\n        self._set_ref()", "min_run_count": 2, "name": "integrate.TimeIntegration01.time_doit", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0db59d9c1fa4d51f1c81f6cf1ab89deaf5b2921d2ebbdd92935973127fe86913", "warmup_time": -1}, "integrate.TimeIntegration01.time_doit_meijerg": {"code": "class TimeIntegration01:\n    def time_doit_meijerg(self):\n        self.values['time_doit_meijerg'] = self.integral.doit(meijerg=True)\n\n    def setup(self):\n        self.integral, self.params = _make_integral_01()\n        self.values = {}\n        self._set_ref()", "min_run_count": 2, "name": "integrate.TimeIntegration01.time_doit_meijerg", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9adc232fef9276c21e8e414305c104466a23d183313ccedb1a41f6f059d25c78", "warmup_time": -1}, "integrate.TimeIntegrationRisch01.time_doit": {"code": "class _TimeIntegrationRisch:\n    def time_doit(self, n):\n        self.values['time_doit'] = self.integral.doit()\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch01.time_doit", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98a198016cd41414aa551c5ec174baccf9ba76ec86a5a660d1173e7ca122855c", "warmup_time": -1}, "integrate.TimeIntegrationRisch01.time_doit_risch": {"code": "class _TimeIntegrationRisch:\n    def time_doit_risch(self, n):\n        self.values['time_doit_risch'] = self.integral.doit(risch=True)\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch01.time_doit_risch", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "832983e0d14f0a724bf87fd3109398e25cf3f78a5720ed4fc05c683fddca481e", "warmup_time": -1}, "integrate.TimeIntegrationRisch02.time_doit": {"code": "class _TimeIntegrationRisch:\n    def time_doit(self, n):\n        self.values['time_doit'] = self.integral.doit()\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch02.time_doit", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98a198016cd41414aa551c5ec174baccf9ba76ec86a5a660d1173e7ca122855c", "warmup_time": -1}, "integrate.TimeIntegrationRisch02.time_doit_risch": {"code": "class _TimeIntegrationRisch:\n    def time_doit_risch(self, n):\n        self.values['time_doit_risch'] = self.integral.doit(risch=True)\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch02.time_doit_risch", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "832983e0d14f0a724bf87fd3109398e25cf3f78a5720ed4fc05c683fddca481e", "warmup_time": -1}, "integrate.TimeIntegrationRisch03.time_doit": {"code": "class _TimeIntegrationRisch:\n    def time_doit(self, n):\n        self.values['time_doit'] = self.integral.doit()\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch03.time_doit", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98a198016cd41414aa551c5ec174baccf9ba76ec86a5a660d1173e7ca122855c", "warmup_time": -1}, "integrate.TimeIntegrationRisch03.time_doit_risch": {"code": "class _TimeIntegrationRisch:\n    def time_doit_risch(self, n):\n        self.values['time_doit_risch'] = self.integral.doit(risch=True)\n\n    def setup(self, n):\n        x = symbols('x')\n        self.integral = Integral(self.make_expr(n), x)\n        self.values = {}", "min_run_count": 2, "name": "integrate.TimeIntegrationRisch03.time_doit_risch", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "832983e0d14f0a724bf87fd3109398e25cf3f78a5720ed4fc05c683fddca481e", "warmup_time": -1}, "lambdify.TimeLambdifyCreation.time_lambdify_create": {"code": "class TimeLambdifyCreation:\n    def time_lambdify_create(self, modules):\n        sp.lambdify(self.args, self.exprs, modules=modules)\n\n    def setup(self, modules):\n        self.args, self.exprs = _get_args_exprs()", "min_run_count": 2, "name": "lambdify.TimeLambdifyCreation.time_lambdify_create", "number": 0, "param_names": ["param1"], "params": [["['math']", "['numpy']"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "49bde829d76cfd3c80c384a53b0a87d48ee8f99eaec3b118ac134e0e88ee6910", "warmup_time": -1}, "lambdify.TimeLambdifyEvaluate.time_lambdify_evaluate": {"code": "class TimeLambdifyEvaluate:\n    def time_lambdify_evaluate(self, modules):\n        self.lmb(*self.inp)\n\n    def setup(self, modules):\n        self.lmb = sp.lambdify(*_get_args_exprs(), modules=modules)\n        self.inp = [1]*28", "min_run_count": 2, "name": "lambdify.TimeLambdifyEvaluate.time_lambdify_evaluate", "number": 0, "param_names": ["param1"], "params": [["['math']", "['numpy']"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "764e739650ed66a51b2bf0293c231933fd0ad52646a8a3c8114d2457a15d0664", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.peakmem_jacobian_wrt_functions": {"code": "class TimeLargeExpressionOperations:\n    def peakmem_jacobian_wrt_functions(self):\n    \n        self.func_matrix.jacobian(self.funcs)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "name": "large_exprs.TimeLargeExpressionOperations.peakmem_jacobian_wrt_functions", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "032167ebb6b7d846e248f1062eeb2483607b22a31c364488c353661ef7ba547c"}, "large_exprs.TimeLargeExpressionOperations.peakmem_jacobian_wrt_symbols": {"code": "class TimeLargeExpressionOperations:\n    def peakmem_jacobian_wrt_symbols(self):\n    \n        self.sym_matrix.jacobian(self.syms)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "name": "large_exprs.TimeLargeExpressionOperations.peakmem_jacobian_wrt_symbols", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a351a7dd76ca3c861487ca4d7641e7d55bf70a1951cc030c5d25ffd2503c5f48"}, "large_exprs.TimeLargeExpressionOperations.peakmem_subs": {"code": "class TimeLargeExpressionOperations:\n    def peakmem_subs(self):\n    \n        self.func_matrix.subs(self.subs)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "name": "large_exprs.TimeLargeExpressionOperations.peakmem_subs", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "35f1442cf4f8e7c26f5ebb141cf3c08a157c2c2ae58c967c388f109d6b7d556a"}, "large_exprs.TimeLargeExpressionOperations.time_count_ops": {"code": "class TimeLargeExpressionOperations:\n    def time_count_ops(self):\n    \n        self.super_long_expr.count_ops()\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_count_ops", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4141e2c60d355f28dc38e81ebeba15584f7003e6deca825b79bf60551ee92d43", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_cse": {"code": "class TimeLargeExpressionOperations:\n    def time_cse(self):\n    \n        sm.cse(self.long_expr)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_cse", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5a945464f124fef516df3332c88451743e72a526699f55138f423631d577c791", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_free_symbols": {"code": "class TimeLargeExpressionOperations:\n    def time_free_symbols(self):\n    \n        self.super_long_expr.free_symbols\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_free_symbols", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "10e349241ccc9a285508d314c4a74bde1d612ac16d83dfe0c8e45152df867a15", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_jacobian_wrt_functions": {"code": "class TimeLargeExpressionOperations:\n    def time_jacobian_wrt_functions(self):\n    \n        self.func_matrix.jacobian(self.funcs)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_jacobian_wrt_functions", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8146620a9b1badd79f98e4cbab9066e862b50f8af78ca00817cef43fbe6b704e", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_jacobian_wrt_symbols": {"code": "class TimeLargeExpressionOperations:\n    def time_jacobian_wrt_symbols(self):\n    \n        self.sym_matrix.jacobian(self.syms)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_jacobian_wrt_symbols", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b80290cca608a504dc20e047f6aa02c0cc17990a54cdc7b85136b7056649ba0", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_manual_jacobian_wrt_functions": {"code": "class TimeLargeExpressionOperations:\n    def time_manual_jacobian_wrt_functions(self):\n    \n        for expr in self.func_matrix:\n            for func in self.funcs:\n                expr.diff(func)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_manual_jacobian_wrt_functions", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "899a87367f5080ef6b623d0de1463edb477a24cc38ecd6289365a2e07a060f23", "warmup_time": -1}, "large_exprs.TimeLargeExpressionOperations.time_subs": {"code": "class TimeLargeExpressionOperations:\n    def time_subs(self):\n    \n        self.func_matrix.subs(self.subs)\n\n    def setup(self):\n    \n        t = sm.symbols('t')\n    \n        self.funcs = [s(t) for s in sm.symbols('q:6, u:6', cls=sm.Function)]\n    \n        self.syms = sm.symbols('x:{}'.format(len(self.funcs)))\n    \n        self.subs = dict(zip(self.funcs, self.syms))\n    \n        self.func_matrix = _load_matrix()\n    \n        self.sym_matrix = self.func_matrix.subs(self.subs)\n    \n        self.long_expr = 0\n    \n        for expr in self.sym_matrix[:]:\n            self.long_expr += expr\n    \n        self.super_long_expr = (self.sym_matrix[0, 0] ** 3).expand()", "min_run_count": 2, "name": "large_exprs.TimeLargeExpressionOperations.time_subs", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ee82fdb46fe62ba237545a5b2987cec0e1c3b6e93467a402b4906f05b7d0b3f0", "warmup_time": -1}, "logic.LogicSuite.time_dpll": {"code": "class LogicSuite:\n    def time_dpll(self):\n        for theory in self.theories:\n            if not satisfiable(theory, algorithm='dpll'):\n                raise ValueError(\"Function returned false\")\n\n    def setup(self):\n        self.INPUT = [5*i for i in range(2, 16)]\n        self.theories = []\n        for test in self.INPUT:\n            file_name = os.path.join(input_path, 'logic-inputs', '%s.cnf' % test)\n            theory = load_file(file_name)\n            self.theories.append(theory)", "min_run_count": 2, "name": "logic.LogicSuite.time_dpll", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2fd0ac5e019afa7a85c103aace8550053f68636e70d08fbdef3779f97f03ffde", "warmup_time": -1}, "logic.LogicSuite.time_dpll2": {"code": "class LogicSuite:\n    def time_dpll2(self):\n        for theory in self.theories:\n            if not satisfiable(theory, algorithm='dpll2'):\n                raise ValueError(\"Function returned false\")\n\n    def setup(self):\n        self.INPUT = [5*i for i in range(2, 16)]\n        self.theories = []\n        for test in self.INPUT:\n            file_name = os.path.join(input_path, 'logic-inputs', '%s.cnf' % test)\n            theory = load_file(file_name)\n            self.theories.append(theory)", "min_run_count": 2, "name": "logic.LogicSuite.time_dpll2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e558e93e62382f7828d99ffdb1f91fd93db4b33766c040400aea32cd21985bf7", "warmup_time": -1}, "logic.LogicSuite.time_load_file": {"code": "class LogicSuite:\n    def time_load_file(self):\n        file_name = os.path.join(input_path, 'logic-inputs', '10.cnf')\n        load_file(file_name)\n\n    def setup(self):\n        self.INPUT = [5*i for i in range(2, 16)]\n        self.theories = []\n        for test in self.INPUT:\n            file_name = os.path.join(input_path, 'logic-inputs', '%s.cnf' % test)\n            theory = load_file(file_name)\n            self.theories.append(theory)", "min_run_count": 2, "name": "logic.LogicSuite.time_load_file", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "05aa92e0479acaaa6dc45592bef1ae051b7866041a9ec384a6b811a2823c86a6", "warmup_time": -1}, "matrices.TimeDiagonalEigenvals.time_eigenvals": {"code": "class TimeDiagonalEigenvals:\n    def time_eigenvals(self):\n        self.M.eigenvals()\n\n    def setup(self):\n        def entry(i, j):\n            if i == j:\n                return i\n            elif i > j:\n                return j\n            else:\n                return 0\n        self.M = Matrix(5, 5, entry)", "min_run_count": 2, "name": "matrices.TimeDiagonalEigenvals.time_eigenvals", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1787d879ca4f9a285b5124d79874a981fd43a703a23d4e142ad8cf21d945a709", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_Add": {"code": "class TimeMatrixExpression:\n    def time_Add(self):\n        Add(*args)", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_Add", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b458d7b3853854d55a6960f2aa0bd00b2164e6825feb348993da8dbbeed0f0b7", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_MatAdd": {"code": "class TimeMatrixExpression:\n    def time_MatAdd(self):\n        MatAdd(*args)", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_MatAdd", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ab73cf9835ed980df3996c2ca24435210272135192999fdc4aa076006982e61c", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_MatAdd_doit": {"code": "class TimeMatrixExpression:\n    def time_MatAdd_doit(self):\n        MatAdd(*args).doit()", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_MatAdd_doit", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a7ac4462efdfcaa034bf274d0d9dbc5be1b84d35cfa2e2c44b0758ddd3a41e7a", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_MatMul": {"code": "class TimeMatrixExpression:\n    def time_MatMul(self):\n        MatMul(*args)", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_MatMul", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "17b6affb7b46c8aec76f7ff4813783c94231a1a970cc0fe867c81a3b22ab4cae", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_MatMul_doit": {"code": "class TimeMatrixExpression:\n    def time_MatMul_doit(self):\n        MatMul(*args).doit()", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_MatMul_doit", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8bfdf82c3dc3e93b4a0b4f920d871ae1c04cdf2579371a80aec088c546dc4dd9", "warmup_time": -1}, "matrices.TimeMatrixExpression.time_Mul": {"code": "class TimeMatrixExpression:\n    def time_Mul(self):\n        Mul(*args)", "min_run_count": 2, "name": "matrices.TimeMatrixExpression.time_Mul", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2d6c147887ba18d120a77bbfdab544cfa21defddbcd65ee161d02df066309b02", "warmup_time": -1}, "matrices.TimeMatrixGetItem.time_ImmutableDenseMatrix_getitem": {"code": "class TimeMatrixGetItem:\n    def time_ImmutableDenseMatrix_getitem(self):\n        m = self.M2\n        for i in range(m.rows):\n            for j in range(m.cols):\n                m[i, j]\n\n    def setup(self):\n        self.M1 = MutableDenseMatrix.zeros(5, 5)\n        self.M2 = ImmutableDenseMatrix.zeros(5, 5)\n        self.M3 = MutableSparseMatrix.zeros(5, 5)\n        self.M4 = ImmutableSparseMatrix.zeros(5, 5)", "min_run_count": 2, "name": "matrices.TimeMatrixGetItem.time_ImmutableDenseMatrix_getitem", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3c798d764c1a512b7230aedc50cf3e93bc1dced3baf2cdbf160501d671fdc715", "warmup_time": -1}, "matrices.TimeMatrixGetItem.time_ImmutableSparseMatrix_getitem": {"code": "class TimeMatrixGetItem:\n    def time_ImmutableSparseMatrix_getitem(self):\n        m = self.M4\n        for i in range(m.rows):\n            for j in range(m.cols):\n                m[i, j]\n\n    def setup(self):\n        self.M1 = MutableDenseMatrix.zeros(5, 5)\n        self.M2 = ImmutableDenseMatrix.zeros(5, 5)\n        self.M3 = MutableSparseMatrix.zeros(5, 5)\n        self.M4 = ImmutableSparseMatrix.zeros(5, 5)", "min_run_count": 2, "name": "matrices.TimeMatrixGetItem.time_ImmutableSparseMatrix_getitem", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0df70ecc0913e57227e62650dadb52289f4d5330678105caa4f4266bedf2f7f4", "warmup_time": -1}, "matrices.TimeMatrixGetItem.time_MutableDenseMatrix_getitem": {"code": "class TimeMatrixGetItem:\n    def time_MutableDenseMatrix_getitem(self):\n        m = self.M1\n        for i in range(m.rows):\n            for j in range(m.cols):\n                m[i, j]\n\n    def setup(self):\n        self.M1 = MutableDenseMatrix.zeros(5, 5)\n        self.M2 = ImmutableDenseMatrix.zeros(5, 5)\n        self.M3 = MutableSparseMatrix.zeros(5, 5)\n        self.M4 = ImmutableSparseMatrix.zeros(5, 5)", "min_run_count": 2, "name": "matrices.TimeMatrixGetItem.time_MutableDenseMatrix_getitem", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a182d6afc23f8b55b2badd776cc5bc12d265534e8e3ee9056e3de4dd4923ef22", "warmup_time": -1}, "matrices.TimeMatrixGetItem.time_MutableSparseMatrix_getitem": {"code": "class TimeMatrixGetItem:\n    def time_MutableSparseMatrix_getitem(self):\n        m = self.M3\n        for i in range(m.rows):\n            for j in range(m.cols):\n                m[i, j]\n\n    def setup(self):\n        self.M1 = MutableDenseMatrix.zeros(5, 5)\n        self.M2 = ImmutableDenseMatrix.zeros(5, 5)\n        self.M3 = MutableSparseMatrix.zeros(5, 5)\n        self.M4 = ImmutableSparseMatrix.zeros(5, 5)", "min_run_count": 2, "name": "matrices.TimeMatrixGetItem.time_MutableSparseMatrix_getitem", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4e7699a5f5d38a72080cf1af823c9547c31ca29509c3c130f9ad1499132cd2a9", "warmup_time": -1}, "matrices.TimeMatrixPower.time_Case1": {"code": "class TimeMatrixPower:\n    def time_Case1(self):\n        m = self.Case1**4", "min_run_count": 2, "name": "matrices.TimeMatrixPower.time_Case1", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d187f46967730ed24195a080ed1cf59ff8593a8e15706953b4893e72be036001", "warmup_time": -1}, "matrices.TimeMatrixPower.time_Case2": {"code": "class TimeMatrixPower:\n    def time_Case2(self):\n        m = self.Case2**4", "min_run_count": 2, "name": "matrices.TimeMatrixPower.time_Case2", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c13ce3b22c5673ce43bcfdb5c3c27b9e7ec249e1b4b6c34aac88aadefeb23fca", "warmup_time": -1}, "matrices.TimeMatrixPower.time_Case3": {"code": "class TimeMatrixPower:\n    def time_Case3(self):\n        m = self.Case3**4", "min_run_count": 2, "name": "matrices.TimeMatrixPower.time_Case3", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "006d5f4160b12dfc1f2bf7100471b77c5690ed1fdb82e14f336a4e5ebca144dd", "warmup_time": -1}, "physics.mechanics.kane.KanesMethodMassSpringDamper.time_kanesmethod_mass_spring_damper": {"code": "class KanesMethodMassSpringDamper:\n    def time_kanesmethod_mass_spring_damper(self):\n        # Create the equations of motion using kanes method\n        self.KM.kanes_equations(self.first_input, self.second_input)\n\n    def setup(self):\n        # This is taken from the example in KanesMethod docstring\n        # System state variables\n        q, u = me.dynamicsymbols('q u')\n        qd, ud = me.dynamicsymbols('q u', 1)\n    \n        # Other system variables\n        m, c, k = symbols('m c k')\n    \n        # Set up the reference frame\n        N = me.ReferenceFrame('N')\n    \n        # Set up the point and particle\n        P = me.Point('P')\n        P.set_vel(N, u * N.x)\n    \n        pa = me.Particle('pa', P, m)\n    \n        # Create the list of kinematic differential equations, force list and\n        # list of bodies/particles\n        kd = [qd - u]\n        force_list = [(P, (-k * q - c * u) * N.x)]\n        body_list = [pa]\n    \n        # Create an instance of KanesMethod\n        self.KM = me.KanesMethod(N, q_ind=[q], u_ind=[u], kd_eqs=kd)\n    \n        # Account for the new method of input to kanes_equations, i.e. the\n        # order of the args in the old API is forces, bodies and the new API\n        # is bodies, forces.\n        try:\n            self.KM.kanes_equations(body_list, force_list)\n            self.first_input = body_list\n            self.second_input = force_list\n        except TypeError:\n            self.first_input = force_list\n            self.second_input = body_list", "min_run_count": 2, "name": "physics.mechanics.kane.KanesMethodMassSpringDamper.time_kanesmethod_mass_spring_damper", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1b74ed7c8d8c2f9bd9393417e82791e0baa0827bc5e92e8d74933cdadb9f68b7", "warmup_time": -1}, "physics.mechanics.lagrange.LagrangesMethodMassSpringDamper.time_lagrangesmethod_mass_spring_damper": {"code": "class LagrangesMethodMassSpringDamper:\n    def time_lagrangesmethod_mass_spring_damper(self):\n        # Create the equations of motion using lagranges method\n        self.l.form_lagranges_equations()\n\n    def setup(self):\n        # System state variables\n        q = me.dynamicsymbols('q')\n        qd = me.dynamicsymbols('q', 1)\n    \n        # Other system variables\n        m, k, b = symbols('m k b')\n    \n        # Set up the reference frame\n        N = me.ReferenceFrame('N')\n    \n        # Set up the points and particles\n        P = me.Point('P')\n        P.set_vel(N, qd * N.x)\n    \n        Pa = me.Particle('Pa', P, m)\n    \n        # Define the potential energy and create the Lagrangian\n        Pa.potential_energy = k * q**2 / 2.0\n        L = me.Lagrangian(N, Pa)\n    \n        # Create the list of forces acting on the system\n        fl = [(P, -b * qd * N.x)]\n    \n        # Create an instance of Lagranges Method\n        self.l = me.LagrangesMethod(L, [q], forcelist=fl, frame=N)", "min_run_count": 2, "name": "physics.mechanics.lagrange.LagrangesMethodMassSpringDamper.time_lagrangesmethod_mass_spring_damper", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f73ad55f79ca8bbada923f20835965d5b3e8fc0993b4500526559c9a92332c1f", "warmup_time": -1}, "polygon.PolygonArbitraryPoint.time_bench01": {"code": "class PolygonArbitraryPoint:\n    def time_bench01(self):\n        \"Polygon.arbitrary_point for w in range(10)\"\n        [listOfPolygons[w].arbitrary_point() for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonArbitraryPoint.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cd1c0117e32756629bc4b804f1ffdbafc8d38eb678028d19aa962b95b9fe7779", "warmup_time": -1}, "polygon.PolygonAttributes.time_area": {"code": "class PolygonAttributes:\n    def time_area(self):\n        \"Polygon.area for w in range(10)\"\n        [listOfPolygons[w].area for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonAttributes.time_area", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "af892c4fa2bb0f6aa61ab785ceef7592f00f286b7e31596d85b894b769225033", "warmup_time": -1}, "polygon.PolygonAttributes.time_centroid": {"code": "class PolygonAttributes:\n    def time_centroid(self):\n        \"Polygon.centroid for w in range(10)\"\n        [listOfPolygons[w].centroid for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonAttributes.time_centroid", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8e6bcd6d5a20eb6f8707f6e2e67cf353871a02158659a00d74ef9776065760d7", "warmup_time": -1}, "polygon.PolygonAttributes.time_create": {"code": "class PolygonAttributes:\n    def time_create(self):\n        \"Creating Polygon\"\n        Polygon(Point(0, 0), Point(3, -1),Point(6, 0), Point(4, 5))", "min_run_count": 2, "name": "polygon.PolygonAttributes.time_create", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e4b24b867eb635d6a4d410cc2f84547238c7bb194d6099a69d29646202d00a14", "warmup_time": -1}, "polygon.PolygonAttributes.time_perimeter": {"code": "class PolygonAttributes:\n    def time_perimeter(self):\n        \"Polygon.perimeter for w in range(10)\"\n        [listOfPolygons[w].perimeter for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonAttributes.time_perimeter", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e65cae1452e8c84f06aa3ad24242786b31e44300d919aa15c74bdcda34f31ba", "warmup_time": -1}, "polygon.PolygonAttributes.time_sides": {"code": "class PolygonAttributes:\n    def time_sides(self):\n        \"Polygon.sides for w in range(10)\"\n        [listOfPolygons[w].sides for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonAttributes.time_sides", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6e88be144a6be5c5b4c3368c30d9998e5e6556b2565f480e582e3d1006d2c031", "warmup_time": -1}, "polygon.PolygonCutSection.time_bench01": {"code": "class PolygonCutSection:\n    def time_bench01(self):\n        \"Polygon.cut_section for w in range(10)\"\n        [cutListOfPolygons[w].cut_section(cutLines[w]) for w in range(10)]\n\n    def setup(self):\n        if LooseVersion(sympy.__version__) < LooseVersion(\"1.5.0\"):\n            raise NotImplementedError", "min_run_count": 2, "name": "polygon.PolygonCutSection.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d7a4e88f1891a199ab7c5c7ac060f699860c905f891cde379320ad04b09a5e93", "warmup_time": -1}, "polygon.PolygonDistance.time_bench01": {"code": "class PolygonDistance:\n    def time_bench01(self):\n        \"Polygon.distance() for w in range(10)\"\n        [listOfPolygons[w].distance(Point(randint(0,10),randint(0,10))) for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonDistance.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2c56619b1ba95e2436d6515c8045c3309be713fb3eacfefc16c02626227465c0", "warmup_time": -1}, "polygon.PolygonEnclosesPoint.time_bench01": {"code": "class PolygonEnclosesPoint:\n    def time_bench01(self,Point2=Point(randint(0,10),randint(0,10))):\n        \"Polygon.encloses_point for w in range(10)\"\n        [listOfPolygons[w].encloses_point(Point2) for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonEnclosesPoint.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f0cf4ade990b381507372ea32c67af8876bd1f1b2c1afb0c8479f4a58e309f63", "warmup_time": -1}, "polygon.PolygonFirstMoment.time_bench01": {"code": "class PolygonFirstMoment:\n    def time_bench01(self):\n        \"Polygon.first_moment_of_area for w in range(10)\"\n        [listOfPolygons[w].first_moment_of_area() for w in range(10)]\n\n    def setup(self):\n        if LooseVersion(sympy.__version__) < LooseVersion(\"1.5.0\"):\n            raise NotImplementedError", "min_run_count": 2, "name": "polygon.PolygonFirstMoment.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a22278878a794af2594e23646b720769a165c9c655d9ccf86fda1d01eadf5887", "warmup_time": -1}, "polygon.PolygonIsConvex.time_bench01": {"code": "class PolygonIsConvex:\n    def time_bench01(self):\n        \"Polygon.is_convex() for w in range(10)\"\n        [listOfPolygons[w].is_convex() for w in range(10)]", "min_run_count": 2, "name": "polygon.PolygonIsConvex.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "67ff04277dbfe4122b47a11ee8b1336f016d824164d2bfe237e8b95327cc1e02", "warmup_time": -1}, "polygon.PolygonPolarSecondMoment.time_bench01": {"code": "class PolygonPolarSecondMoment:\n    def time_bench01(self):\n        \"Polygon.polar_second_moment_of_area for w in range(10)\"\n        [listOfPolygons[w].polar_second_moment_of_area() for w in range(10)]\n\n    def setup(self):\n        if LooseVersion(sympy.__version__) < LooseVersion(\"1.5.0\"):\n            raise NotImplementedError", "min_run_count": 2, "name": "polygon.PolygonPolarSecondMoment.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d6c3d5472b9d64e5ee6328ad34136f17bf6c2a1f9488addaf195fd5cda14c8ed", "warmup_time": -1}, "polygon.PolygonSecondMoment.time_bench01": {"code": "class PolygonSecondMoment:\n    def time_bench01(self):\n        \"Polygon.second_moment_of_area() for w in range(10)\"\n        [listOfPolygons[w].second_moment_of_area() for w in range(10)]\n\n    def setup(self):\n        if LooseVersion(sympy.__version__) < LooseVersion(\"1.3.0\"):\n            raise NotImplementedError", "min_run_count": 2, "name": "polygon.PolygonSecondMoment.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1eec7b118fcb665d697fdda58c18ceb4f73542f825f7a1e4fa92f117bb4dad93", "warmup_time": -1}, "polygon.PolygonSectionModulus.time_bench01": {"code": "class PolygonSectionModulus:\n    def time_bench01(self):\n        \"Polygon.section_modulus for w in range(10)\"\n        [listOfPolygons[w].section_modulus() for w in range(10)]\n\n    def setup(self):\n        if LooseVersion(sympy.__version__) < LooseVersion(\"1.5.0\"):\n            raise NotImplementedError", "min_run_count": 2, "name": "polygon.PolygonSectionModulus.time_bench01", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be2e4bfa18490ec91a66a89571353213ad4fc692d34575236967341615f37da4", "warmup_time": -1}, "polys.TimePolyManyGens.time_create_poly": {"code": "class TimePolyManyGens:\n    def time_create_poly(self, n):\n        sympy.Poly(self.x, self.xs)\n\n    def setup(self, n):\n        self.xs = sympy.symbols('x:{}'.format(n))\n        self.x = self.xs[n // 2]\n        self.px = sympy.Poly(self.x, self.xs)", "min_run_count": 2, "name": "polys.TimePolyManyGens.time_create_poly", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100", "500"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1b38351392d0e509b3a98dcc016a0ae36c96ccef540ed47dff987f5a50355d60", "warmup_time": -1}, "polys.TimePolyManyGens.time_is_linear": {"code": "class TimePolyManyGens:\n    def time_is_linear(self, n):\n        self.px.is_linear\n\n    def setup(self, n):\n        self.xs = sympy.symbols('x:{}'.format(n))\n        self.x = self.xs[n // 2]\n        self.px = sympy.Poly(self.x, self.xs)", "min_run_count": 2, "name": "polys.TimePolyManyGens.time_is_linear", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100", "500"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1708e7d45453e76f7fb1f9b54a62017c231c0ad93ad034aeb8f7341b3c893214", "warmup_time": -1}, "solve.TimeMatrixArithmetic.time_dense_add": {"code": "class TimeMatrixArithmetic:\n    def time_dense_add(self, n, num_symbols):\n        self.A + self.A\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based off a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        # create a matrix with the appropriate number of symbols based on\n        # a pre-determined list of positions.\n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixArithmetic.time_dense_add", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4", "6", "10"], ["0", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c54bc68e1f076c13f18a8bc1e64b52436a72d307b25f0c10434e4bdce404c390", "warmup_time": -1}, "solve.TimeMatrixArithmetic.time_dense_multiply": {"code": "class TimeMatrixArithmetic:\n    def time_dense_multiply(self, n, num_symbols):\n        self.A * self.A\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based off a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        # create a matrix with the appropriate number of symbols based on\n        # a pre-determined list of positions.\n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixArithmetic.time_dense_multiply", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4", "6", "10"], ["0", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2fe807a71f943bdb25276042e38151e8c183f5f43a6c3a3360ef001780bd4a1b", "warmup_time": -1}, "solve.TimeMatrixOperations.time_det": {"code": "class TimeMatrixOperations:\n    def time_det(self, n, num_symbols):\n        self.A.det()\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based of a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixOperations.time_det", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4"], ["0", "2", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "627b30d8c67ea5e6a529e92b6b3554a4277d9fe1dd62550155ba80e28cdfb8a9", "warmup_time": -1}, "solve.TimeMatrixOperations.time_det_bareiss": {"code": "class TimeMatrixOperations:\n    def time_det_bareiss(self, n, num_symbols):\n        self.A.det(method='bareiss')\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based of a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixOperations.time_det_bareiss", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4"], ["0", "2", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b0c1ff8b4303a7a55d6399114f02f14c6293e5f4958697c78477e08a8097949a", "warmup_time": -1}, "solve.TimeMatrixOperations.time_det_berkowitz": {"code": "class TimeMatrixOperations:\n    def time_det_berkowitz(self, n, num_symbols):\n        self.A.det(method='berkowitz')\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based of a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixOperations.time_det_berkowitz", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4"], ["0", "2", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b9845415024ed3d2ab2cafe558fc8fd69ecf881b9b2771a055165208d63e36cc", "warmup_time": -1}, "solve.TimeMatrixOperations.time_rank": {"code": "class TimeMatrixOperations:\n    def time_rank(self, n, num_symbols):\n        self.A.rank()\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based of a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixOperations.time_rank", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4"], ["0", "2", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9d140faf418df1316222b7090bc6015bcd976fb08afc6fd36b830fae6d709284", "warmup_time": -1}, "solve.TimeMatrixOperations.time_rref": {"code": "class TimeMatrixOperations:\n    def time_rref(self, n, num_symbols):\n        self.A.rref()\n\n    def setup(self, n, num_symbols):\n        from sympy import Matrix, Symbol\n    \n        # every test will be based of a submatrix of this matrix\n        big_mat = Matrix([[3, 8, 10, 5, 10, 7, 10, 10, 8, 6],\n                          [10, 9, 3, 7, 10, 1, 4, 2, 8, 1],\n                          [5, 9, 9, 0, 2, 10, 5, 9, 3, 9],\n                          [1, 8, 0, 7, 8, 8, 0, 4, 1, 10],\n                          [6, 5, 3, 0, 3, 4, 6, 1, 10, 5],\n                          [7, 10, 8, 9, 10, 7, 2, 8, 3, 2],\n                          [10, 8, 5, 10, 3, 5, 10, 4, 2, 3],\n                          [8, 4, 10, 9, 1, 9, 7, 4, 8, 6],\n                          [6, 2, 4, 1, 1, 0, 1, 3, 1, 9],\n                          [9, 2, 6, 10, 9, 4, 10, 2, 1, 8]])\n        symbol_locations = [(2, 2), (1, 9), (0, 0), (0, 7), (9, 1),\n                            (6, 9), (8, 9), (4, 0), (3, 8), (3, 2),\n                            (2, 8), (1, 8), (5, 3), (5, 9), (6, 4),\n                            (5, 5), (7, 9), (5, 1), (1, 0), (3, 3),\n                            (7, 1), (2, 5), (1, 5), (4, 4), (4, 2),\n                            (7, 3), (3, 4), (6, 6), (9, 5), (1, 6),\n                            (9, 0), (3, 1), (0, 4), (8, 3), (2, 3),\n                            (3, 9), (9, 6), (4, 8), (9, 3), (8, 0),\n                            (6, 7), (5, 7), (8, 6), (3, 6), (4, 5),\n                            (1, 2), (9, 8), (7, 4), (8, 8), (6, 1),\n                            (0, 3), (4, 7), (7, 0), (9, 7), (5, 4),\n                            (7, 6), (2, 6), (3, 7), (3, 5), (1, 4),\n                            (5, 0), (4, 9), (7, 8), (6, 8), (2, 1),\n                            (9, 2), (3, 0), (7, 7), (2, 7), (2, 0),\n                            (8, 1), (7, 5), (4, 3), (1, 3), (9, 9),\n                            (0, 6), (4, 1), (5, 8), (8, 4), (0, 8),\n                            (2, 4), (9, 4), (7, 2), (1, 7), (6, 3),\n                            (6, 5), (5, 2), (6, 0), (0, 1), (8, 2),\n                            (2, 9), (8, 5), (0, 2), (0, 9), (8, 7),\n                            (4, 6), (0, 5), (1, 1), (6, 2), (5, 6)]\n    \n        symbol_locations = [(i, j) for (i, j) in symbol_locations if i <= n and j <= n]\n        symbol_locations = symbol_locations[:num_symbols]\n    \n        def entry(i, j):\n            if (i, j) in symbol_locations:\n                return Symbol('x')\n            return big_mat[i, j]\n        self.A = Matrix(n, n, entry)", "min_run_count": 2, "name": "solve.TimeMatrixOperations.time_rref", "number": 0, "param_names": ["param1", "param2"], "params": [["3", "4"], ["0", "2", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "15c7fcd93836d9be3b13e8f0fba77199c0e61a71c62799966ef128e3f4282167", "warmup_time": -1}, "solve.TimeMatrixPositiveDefinite.time_A_is_positive_definite": {"code": "class TimeMatrixPositiveDefinite:\n    def time_A_is_positive_definite(self):\n        self.A.is_positive_definite\n\n    def setup(self):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixPositiveDefinite.time_A_is_positive_definite", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9f4a08f684dcbc00d6bc5f830ad16a80b9f1f07e7efc9889596ce13a877acbd2", "warmup_time": -1}, "solve.TimeMatrixPositiveDefinite.time_A_sym_is_positive_definite": {"code": "class TimeMatrixPositiveDefinite:\n    def time_A_sym_is_positive_definite(self):\n        self.A_sym.is_positive_definite\n\n    def setup(self):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixPositiveDefinite.time_A_sym_is_positive_definite", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "86c9d38e4012fc7f603a6a7f4c3fe2c893aa10a6305d4b55c9542c08d8050672", "warmup_time": -1}, "solve.TimeMatrixSolve.time_solve": {"code": "class TimeMatrixSolve:\n    def time_solve(self, name):\n        self.A.solve(self.b, method=name)\n\n    def setup(self, name):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixSolve.time_solve", "number": 0, "param_names": ["param1"], "params": [["'GE'", "'LU'", "'ADJ'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed1ba99db9c330b08f5731a98e09b9f281e1b5f3bba1a2e2f7426faa097bbac8", "warmup_time": -1}, "solve.TimeMatrixSolve.time_solve_sym": {"code": "class TimeMatrixSolve:\n    def time_solve_sym(self, name):\n        self.A_sym.solve(self.b, method=name)\n\n    def setup(self, name):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixSolve.time_solve_sym", "number": 0, "param_names": ["param1"], "params": [["'GE'", "'LU'", "'ADJ'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9c9b5509c43eda202f9af4a88bad5113a4511af114e5e6c788c041366d670046", "warmup_time": -1}, "solve.TimeMatrixSolve2.time_LDLsolve": {"code": "class TimeMatrixSolve2:\n    def time_LDLsolve(self):\n        self.A_sym.LDLsolve(self.b)\n\n    def setup(self):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixSolve2.time_LDLsolve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e50e8551b9c3133a7486dc430f0c1a66e03ff8557570bc29f25ce86116f56f58", "warmup_time": -1}, "solve.TimeMatrixSolve2.time_cholesky_solve": {"code": "class TimeMatrixSolve2:\n    def time_cholesky_solve(self):\n        self.A_sym.cholesky_solve(self.b)\n\n    def setup(self):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixSolve2.time_cholesky_solve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dba6440d05b0c716309aa1b91a8d9e50f98eef6da2593eeb2b0f6b5678efcf34", "warmup_time": -1}, "solve.TimeMatrixSolve2.time_lusolve": {"code": "class TimeMatrixSolve2:\n    def time_lusolve(self):\n        self.A.LUsolve(self.b)\n\n    def setup(self):\n        self.A, self.b, self.A_sym = _matrix_solve_setup()", "min_run_count": 2, "name": "solve.TimeMatrixSolve2.time_lusolve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5b0855b3ac7bebb3778eaa6106778b749728bfc8c64531ae9361b97e4db6167a", "warmup_time": -1}, "solve.TimeMatrixSolvePyDyFast.time_LUsolve": {"code": "class TimeMatrixSolvePyDyFast:\n    def time_LUsolve(self, n):\n        self.M.LUsolve(self.F)\n\nclass PyDyExample:\n    def setup(self, n):\n        # from pydy.models import n_link_pendulum_on_cart\n        # sys = n_link_pendulum_on_cart(n=1)\n        # M = sys.eom_method.mass_matrix\n        # F = sys.eom_method.forcing\n        #\n        # Bigger examples can be made by increasing n but at the time of\n        # writing this is already slow for Cholesky/LDL\n    \n        g, t = sympy.symbols('g, t')\n        m0, m1, m2, m3 = sympy.symbols('m:4')\n        l0, l1, l2 = sympy.symbols('l:3')\n        F, q1, q2, q3, u1, u2, u3 = sympy.symbols('F, q1:4, u1:4', cls=sympy.Function)\n        cos = sympy.cos\n        sin = sympy.sin\n    \n        if n == 1:\n            self.M = sympy.Matrix([\n                [          m0 + m1, -l0*m1*sin(q1(t))],\n                [-l0*m1*sin(q1(t)),          l0**2*m1]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + F(t)],\n                [             -g*l0*m1*cos(q1(t))]\n            ])\n        elif n == 2:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)),\n                    -l1*m2*sin(q2(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)), l0**2*m1 + l0**2*m2,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))],\n                [-l1*m2*sin(q2(t)), l0*l1*m2*(sin(q1(t))*sin(q2(t))\n                    + cos(q1(t))*cos(q2(t))), l1**2*m2]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t))\n                    + l1*m2*u2(t)**2*cos(q2(t)) + F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t))\n                    + sin(q2(t))*cos(q1(t)))*u2(t)**2],\n                [-g*l1*m2*cos(q2(t)) + l0*l1*m2*(sin(q1(t))*cos(q2(t))\n                    - sin(q2(t))*cos(q1(t)))*u1(t)**2]\n            ])\n        elif n == 3:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2 + m3, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) -\n                    l0*m3*sin(q1(t)), -l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    -l2*m3*sin(q3(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) - l0*m3*sin(q1(t)),\n                    l0**2*m1 + l0**2*m2 + l0**2*m3,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l0*l2*m3*(sin(q1(t))*sin(q3(t)) + cos(q1(t))*cos(q3(t)))],\n                [-l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l1**2*m2 + l1**2*m3, l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t)))],\n                [-l2*m3*sin(q3(t)), l0*l2*m3*(sin(q1(t))*sin(q3(t)) +\n                    cos(q1(t))*cos(q3(t))), l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t))), l2**2*m3]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t)) +\n                    l0*m3*u1(t)**2*cos(q1(t)) + l1*m2*u2(t)**2*cos(q2(t)) +\n                    l1*m3*u2(t)**2*cos(q2(t)) + l2*m3*u3(t)**2*cos(q3(t)) +\n                    F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t)) - g*l0*m3*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l1*m3*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l2*m3*(-sin(q1(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q1(t)))*u3(t)**2],\n                [-g*l1*m2*cos(q2(t)) - g*l1*m3*cos(q2(t)) +\n                    l0*l1*m2*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l0*l1*m3*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(-sin(q2(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q2(t)))*u3(t)**2],\n                [-g*l2*m3*cos(q3(t)) + l0*l2*m3*(sin(q1(t))*cos(q3(t)) -\n                    sin(q3(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(sin(q2(t))*cos(q3(t)) -\n                        sin(q3(t))*cos(q2(t)))*u2(t)**2]\n            ])\n    \n        self.syms = sympy.symbols('x:%d' % self.M.shape[1])\n        self.eqs = self.M * sympy.Matrix(self.syms) - self.F", "min_run_count": 2, "name": "solve.TimeMatrixSolvePyDyFast.time_LUsolve", "number": 0, "param_names": ["param1"], "params": [["1", "2", "3"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fee8b650cdeccbfda1a24b1194088db19104b0a63ac0293ed358523ef38177af", "warmup_time": -1}, "solve.TimeMatrixSolvePyDySlow.time_LDLsolve": {"code": "class TimeMatrixSolvePyDySlow:\n    def time_LDLsolve(self, n):\n        self.M.LDLsolve(self.F)\n\nclass PyDyExample:\n    def setup(self, n):\n        # from pydy.models import n_link_pendulum_on_cart\n        # sys = n_link_pendulum_on_cart(n=1)\n        # M = sys.eom_method.mass_matrix\n        # F = sys.eom_method.forcing\n        #\n        # Bigger examples can be made by increasing n but at the time of\n        # writing this is already slow for Cholesky/LDL\n    \n        g, t = sympy.symbols('g, t')\n        m0, m1, m2, m3 = sympy.symbols('m:4')\n        l0, l1, l2 = sympy.symbols('l:3')\n        F, q1, q2, q3, u1, u2, u3 = sympy.symbols('F, q1:4, u1:4', cls=sympy.Function)\n        cos = sympy.cos\n        sin = sympy.sin\n    \n        if n == 1:\n            self.M = sympy.Matrix([\n                [          m0 + m1, -l0*m1*sin(q1(t))],\n                [-l0*m1*sin(q1(t)),          l0**2*m1]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + F(t)],\n                [             -g*l0*m1*cos(q1(t))]\n            ])\n        elif n == 2:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)),\n                    -l1*m2*sin(q2(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)), l0**2*m1 + l0**2*m2,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))],\n                [-l1*m2*sin(q2(t)), l0*l1*m2*(sin(q1(t))*sin(q2(t))\n                    + cos(q1(t))*cos(q2(t))), l1**2*m2]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t))\n                    + l1*m2*u2(t)**2*cos(q2(t)) + F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t))\n                    + sin(q2(t))*cos(q1(t)))*u2(t)**2],\n                [-g*l1*m2*cos(q2(t)) + l0*l1*m2*(sin(q1(t))*cos(q2(t))\n                    - sin(q2(t))*cos(q1(t)))*u1(t)**2]\n            ])\n        elif n == 3:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2 + m3, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) -\n                    l0*m3*sin(q1(t)), -l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    -l2*m3*sin(q3(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) - l0*m3*sin(q1(t)),\n                    l0**2*m1 + l0**2*m2 + l0**2*m3,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l0*l2*m3*(sin(q1(t))*sin(q3(t)) + cos(q1(t))*cos(q3(t)))],\n                [-l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l1**2*m2 + l1**2*m3, l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t)))],\n                [-l2*m3*sin(q3(t)), l0*l2*m3*(sin(q1(t))*sin(q3(t)) +\n                    cos(q1(t))*cos(q3(t))), l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t))), l2**2*m3]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t)) +\n                    l0*m3*u1(t)**2*cos(q1(t)) + l1*m2*u2(t)**2*cos(q2(t)) +\n                    l1*m3*u2(t)**2*cos(q2(t)) + l2*m3*u3(t)**2*cos(q3(t)) +\n                    F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t)) - g*l0*m3*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l1*m3*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l2*m3*(-sin(q1(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q1(t)))*u3(t)**2],\n                [-g*l1*m2*cos(q2(t)) - g*l1*m3*cos(q2(t)) +\n                    l0*l1*m2*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l0*l1*m3*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(-sin(q2(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q2(t)))*u3(t)**2],\n                [-g*l2*m3*cos(q3(t)) + l0*l2*m3*(sin(q1(t))*cos(q3(t)) -\n                    sin(q3(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(sin(q2(t))*cos(q3(t)) -\n                        sin(q3(t))*cos(q2(t)))*u2(t)**2]\n            ])\n    \n        self.syms = sympy.symbols('x:%d' % self.M.shape[1])\n        self.eqs = self.M * sympy.Matrix(self.syms) - self.F", "min_run_count": 2, "name": "solve.TimeMatrixSolvePyDySlow.time_LDLsolve", "number": 0, "param_names": ["param1"], "params": [["1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ee69f17e1bf3b3fb99ae5cc04d348584f7f130f7c6df847a9eda08827b0191fd", "warmup_time": -1}, "solve.TimeMatrixSolvePyDySlow.time_cholesky_solve": {"code": "class TimeMatrixSolvePyDySlow:\n    def time_cholesky_solve(self, n):\n        self.M.cholesky_solve(self.F)\n\nclass PyDyExample:\n    def setup(self, n):\n        # from pydy.models import n_link_pendulum_on_cart\n        # sys = n_link_pendulum_on_cart(n=1)\n        # M = sys.eom_method.mass_matrix\n        # F = sys.eom_method.forcing\n        #\n        # Bigger examples can be made by increasing n but at the time of\n        # writing this is already slow for Cholesky/LDL\n    \n        g, t = sympy.symbols('g, t')\n        m0, m1, m2, m3 = sympy.symbols('m:4')\n        l0, l1, l2 = sympy.symbols('l:3')\n        F, q1, q2, q3, u1, u2, u3 = sympy.symbols('F, q1:4, u1:4', cls=sympy.Function)\n        cos = sympy.cos\n        sin = sympy.sin\n    \n        if n == 1:\n            self.M = sympy.Matrix([\n                [          m0 + m1, -l0*m1*sin(q1(t))],\n                [-l0*m1*sin(q1(t)),          l0**2*m1]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + F(t)],\n                [             -g*l0*m1*cos(q1(t))]\n            ])\n        elif n == 2:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)),\n                    -l1*m2*sin(q2(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)), l0**2*m1 + l0**2*m2,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))],\n                [-l1*m2*sin(q2(t)), l0*l1*m2*(sin(q1(t))*sin(q2(t))\n                    + cos(q1(t))*cos(q2(t))), l1**2*m2]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t))\n                    + l1*m2*u2(t)**2*cos(q2(t)) + F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t))\n                    + sin(q2(t))*cos(q1(t)))*u2(t)**2],\n                [-g*l1*m2*cos(q2(t)) + l0*l1*m2*(sin(q1(t))*cos(q2(t))\n                    - sin(q2(t))*cos(q1(t)))*u1(t)**2]\n            ])\n        elif n == 3:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2 + m3, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) -\n                    l0*m3*sin(q1(t)), -l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    -l2*m3*sin(q3(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) - l0*m3*sin(q1(t)),\n                    l0**2*m1 + l0**2*m2 + l0**2*m3,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l0*l2*m3*(sin(q1(t))*sin(q3(t)) + cos(q1(t))*cos(q3(t)))],\n                [-l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l1**2*m2 + l1**2*m3, l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t)))],\n                [-l2*m3*sin(q3(t)), l0*l2*m3*(sin(q1(t))*sin(q3(t)) +\n                    cos(q1(t))*cos(q3(t))), l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t))), l2**2*m3]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t)) +\n                    l0*m3*u1(t)**2*cos(q1(t)) + l1*m2*u2(t)**2*cos(q2(t)) +\n                    l1*m3*u2(t)**2*cos(q2(t)) + l2*m3*u3(t)**2*cos(q3(t)) +\n                    F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t)) - g*l0*m3*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l1*m3*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l2*m3*(-sin(q1(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q1(t)))*u3(t)**2],\n                [-g*l1*m2*cos(q2(t)) - g*l1*m3*cos(q2(t)) +\n                    l0*l1*m2*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l0*l1*m3*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(-sin(q2(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q2(t)))*u3(t)**2],\n                [-g*l2*m3*cos(q3(t)) + l0*l2*m3*(sin(q1(t))*cos(q3(t)) -\n                    sin(q3(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(sin(q2(t))*cos(q3(t)) -\n                        sin(q3(t))*cos(q2(t)))*u2(t)**2]\n            ])\n    \n        self.syms = sympy.symbols('x:%d' % self.M.shape[1])\n        self.eqs = self.M * sympy.Matrix(self.syms) - self.F", "min_run_count": 2, "name": "solve.TimeMatrixSolvePyDySlow.time_cholesky_solve", "number": 0, "param_names": ["param1"], "params": [["1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3cc41110c6398ddab1297e21235106139481eb852ef3b0d91a0a51670c15c6c8", "warmup_time": -1}, "solve.TimeMatrixSolvePyDySlow.time_linsolve": {"code": "class TimeMatrixSolvePyDySlow:\n    def time_linsolve(self, n):\n        sympy.linsolve((self.M, self.F))\n\nclass PyDyExample:\n    def setup(self, n):\n        # from pydy.models import n_link_pendulum_on_cart\n        # sys = n_link_pendulum_on_cart(n=1)\n        # M = sys.eom_method.mass_matrix\n        # F = sys.eom_method.forcing\n        #\n        # Bigger examples can be made by increasing n but at the time of\n        # writing this is already slow for Cholesky/LDL\n    \n        g, t = sympy.symbols('g, t')\n        m0, m1, m2, m3 = sympy.symbols('m:4')\n        l0, l1, l2 = sympy.symbols('l:3')\n        F, q1, q2, q3, u1, u2, u3 = sympy.symbols('F, q1:4, u1:4', cls=sympy.Function)\n        cos = sympy.cos\n        sin = sympy.sin\n    \n        if n == 1:\n            self.M = sympy.Matrix([\n                [          m0 + m1, -l0*m1*sin(q1(t))],\n                [-l0*m1*sin(q1(t)),          l0**2*m1]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + F(t)],\n                [             -g*l0*m1*cos(q1(t))]\n            ])\n        elif n == 2:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)),\n                    -l1*m2*sin(q2(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)), l0**2*m1 + l0**2*m2,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))],\n                [-l1*m2*sin(q2(t)), l0*l1*m2*(sin(q1(t))*sin(q2(t))\n                    + cos(q1(t))*cos(q2(t))), l1**2*m2]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t))\n                    + l1*m2*u2(t)**2*cos(q2(t)) + F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t))\n                    + sin(q2(t))*cos(q1(t)))*u2(t)**2],\n                [-g*l1*m2*cos(q2(t)) + l0*l1*m2*(sin(q1(t))*cos(q2(t))\n                    - sin(q2(t))*cos(q1(t)))*u1(t)**2]\n            ])\n        elif n == 3:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2 + m3, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) -\n                    l0*m3*sin(q1(t)), -l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    -l2*m3*sin(q3(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) - l0*m3*sin(q1(t)),\n                    l0**2*m1 + l0**2*m2 + l0**2*m3,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l0*l2*m3*(sin(q1(t))*sin(q3(t)) + cos(q1(t))*cos(q3(t)))],\n                [-l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l1**2*m2 + l1**2*m3, l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t)))],\n                [-l2*m3*sin(q3(t)), l0*l2*m3*(sin(q1(t))*sin(q3(t)) +\n                    cos(q1(t))*cos(q3(t))), l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t))), l2**2*m3]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t)) +\n                    l0*m3*u1(t)**2*cos(q1(t)) + l1*m2*u2(t)**2*cos(q2(t)) +\n                    l1*m3*u2(t)**2*cos(q2(t)) + l2*m3*u3(t)**2*cos(q3(t)) +\n                    F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t)) - g*l0*m3*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l1*m3*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l2*m3*(-sin(q1(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q1(t)))*u3(t)**2],\n                [-g*l1*m2*cos(q2(t)) - g*l1*m3*cos(q2(t)) +\n                    l0*l1*m2*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l0*l1*m3*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(-sin(q2(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q2(t)))*u3(t)**2],\n                [-g*l2*m3*cos(q3(t)) + l0*l2*m3*(sin(q1(t))*cos(q3(t)) -\n                    sin(q3(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(sin(q2(t))*cos(q3(t)) -\n                        sin(q3(t))*cos(q2(t)))*u2(t)**2]\n            ])\n    \n        self.syms = sympy.symbols('x:%d' % self.M.shape[1])\n        self.eqs = self.M * sympy.Matrix(self.syms) - self.F", "min_run_count": 2, "name": "solve.TimeMatrixSolvePyDySlow.time_linsolve", "number": 0, "param_names": ["param1"], "params": [["1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b6a086633ef441345922af7c345d2c86829b042191012322040c3434c144117d", "warmup_time": -1}, "solve.TimeMatrixSolvePyDySlow.time_solve": {"code": "class TimeMatrixSolvePyDySlow:\n    def time_solve(self, n):\n        sympy.solve(self.eqs, self.syms)\n\nclass PyDyExample:\n    def setup(self, n):\n        # from pydy.models import n_link_pendulum_on_cart\n        # sys = n_link_pendulum_on_cart(n=1)\n        # M = sys.eom_method.mass_matrix\n        # F = sys.eom_method.forcing\n        #\n        # Bigger examples can be made by increasing n but at the time of\n        # writing this is already slow for Cholesky/LDL\n    \n        g, t = sympy.symbols('g, t')\n        m0, m1, m2, m3 = sympy.symbols('m:4')\n        l0, l1, l2 = sympy.symbols('l:3')\n        F, q1, q2, q3, u1, u2, u3 = sympy.symbols('F, q1:4, u1:4', cls=sympy.Function)\n        cos = sympy.cos\n        sin = sympy.sin\n    \n        if n == 1:\n            self.M = sympy.Matrix([\n                [          m0 + m1, -l0*m1*sin(q1(t))],\n                [-l0*m1*sin(q1(t)),          l0**2*m1]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + F(t)],\n                [             -g*l0*m1*cos(q1(t))]\n            ])\n        elif n == 2:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)),\n                    -l1*m2*sin(q2(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)), l0**2*m1 + l0**2*m2,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))],\n                [-l1*m2*sin(q2(t)), l0*l1*m2*(sin(q1(t))*sin(q2(t))\n                    + cos(q1(t))*cos(q2(t))), l1**2*m2]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t))\n                    + l1*m2*u2(t)**2*cos(q2(t)) + F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t))\n                    + sin(q2(t))*cos(q1(t)))*u2(t)**2],\n                [-g*l1*m2*cos(q2(t)) + l0*l1*m2*(sin(q1(t))*cos(q2(t))\n                    - sin(q2(t))*cos(q1(t)))*u1(t)**2]\n            ])\n        elif n == 3:\n            self.M = sympy.Matrix([\n                [m0 + m1 + m2 + m3, -l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) -\n                    l0*m3*sin(q1(t)), -l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    -l2*m3*sin(q3(t))],\n                [-l0*m1*sin(q1(t)) - l0*m2*sin(q1(t)) - l0*m3*sin(q1(t)),\n                    l0**2*m1 + l0**2*m2 + l0**2*m3,\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l0*l2*m3*(sin(q1(t))*sin(q3(t)) + cos(q1(t))*cos(q3(t)))],\n                [-l1*m2*sin(q2(t)) - l1*m3*sin(q2(t)),\n                    l0*l1*m2*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))) +\n                    l0*l1*m3*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t))),\n                    l1**2*m2 + l1**2*m3, l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t)))],\n                [-l2*m3*sin(q3(t)), l0*l2*m3*(sin(q1(t))*sin(q3(t)) +\n                    cos(q1(t))*cos(q3(t))), l1*l2*m3*(sin(q2(t))*sin(q3(t)) +\n                        cos(q2(t))*cos(q3(t))), l2**2*m3]\n            ])\n            self.F = sympy.Matrix([\n                [l0*m1*u1(t)**2*cos(q1(t)) + l0*m2*u1(t)**2*cos(q1(t)) +\n                    l0*m3*u1(t)**2*cos(q1(t)) + l1*m2*u2(t)**2*cos(q2(t)) +\n                    l1*m3*u2(t)**2*cos(q2(t)) + l2*m3*u3(t)**2*cos(q3(t)) +\n                    F(t)],\n                [-g*l0*m1*cos(q1(t)) - g*l0*m2*cos(q1(t)) - g*l0*m3*cos(q1(t))\n                    + l0*l1*m2*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l1*m3*(-sin(q1(t))*cos(q2(t)) +\n                        sin(q2(t))*cos(q1(t)))*u2(t)**2 +\n                    l0*l2*m3*(-sin(q1(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q1(t)))*u3(t)**2],\n                [-g*l1*m2*cos(q2(t)) - g*l1*m3*cos(q2(t)) +\n                    l0*l1*m2*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l0*l1*m3*(sin(q1(t))*cos(q2(t)) -\n                        sin(q2(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(-sin(q2(t))*cos(q3(t)) +\n                        sin(q3(t))*cos(q2(t)))*u3(t)**2],\n                [-g*l2*m3*cos(q3(t)) + l0*l2*m3*(sin(q1(t))*cos(q3(t)) -\n                    sin(q3(t))*cos(q1(t)))*u1(t)**2 +\n                    l1*l2*m3*(sin(q2(t))*cos(q3(t)) -\n                        sin(q3(t))*cos(q2(t)))*u2(t)**2]\n            ])\n    \n        self.syms = sympy.symbols('x:%d' % self.M.shape[1])\n        self.eqs = self.M * sympy.Matrix(self.syms) - self.F", "min_run_count": 2, "name": "solve.TimeMatrixSolvePyDySlow.time_solve", "number": 0, "param_names": ["param1"], "params": [["1"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0b557322620231d1c6a8c18ab0c04be5b294e93c2935f28b57810e13735479ed", "warmup_time": -1}, "solve.TimeRationalSystem.time_linsolve": {"code": "class TimeRationalSystem:\n    def time_linsolve(self, n):\n        sympy.linsolve(self.eqsn, self.symsn)\n\n    def setup(self, n):\n        Mn = self.M[:n, :n+1]\n        self.symsn = self.syms[:n]\n        self.eqsn = list(Mn * sympy.Matrix(self.symsn + (1,)))", "min_run_count": 2, "name": "solve.TimeRationalSystem.time_linsolve", "number": 0, "param_names": ["param1"], "params": [["1", "3", "5", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "033bac5eb4d804377a4cf9fef44ab06b44955e3c1de4d866a142d79773c748b7", "warmup_time": -1}, "solve.TimeRationalSystem.time_solve": {"code": "class TimeRationalSystem:\n    def time_solve(self, n):\n        sympy.solve(self.eqsn, self.symsn)\n\n    def setup(self, n):\n        Mn = self.M[:n, :n+1]\n        self.symsn = self.syms[:n]\n        self.eqsn = list(Mn * sympy.Matrix(self.symsn + (1,)))", "min_run_count": 2, "name": "solve.TimeRationalSystem.time_solve", "number": 0, "param_names": ["param1"], "params": [["1", "3", "5", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "01692f7a22d88a6fc7b5ffbcb86534f6ba7c0f1d2a6db5155895ef972f0c48c0", "warmup_time": -1}, "solve.TimeRationalSystemSymbol.time_linsolve": {"code": "class TimeRationalSystem:\n    def time_linsolve(self, n):\n        sympy.linsolve(self.eqsn, self.symsn)\n\nclass TimeRationalSystemSymbol:\n    def setup(self, n):\n        super().setup(n)\n        y = sympy.Symbol('y')\n        self.eqsn = [y*eq for eq in self.eqsn]", "min_run_count": 2, "name": "solve.TimeRationalSystemSymbol.time_linsolve", "number": 0, "param_names": ["param1"], "params": [["1", "3", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c39a7336f024169b7204f484fb42adf19507567d8ba544d2a0533510f6b1494", "warmup_time": -1}, "solve.TimeRationalSystemSymbol.time_solve": {"code": "class TimeRationalSystem:\n    def time_solve(self, n):\n        sympy.solve(self.eqsn, self.symsn)\n\nclass TimeRationalSystemSymbol:\n    def setup(self, n):\n        super().setup(n)\n        y = sympy.Symbol('y')\n        self.eqsn = [y*eq for eq in self.eqsn]", "min_run_count": 2, "name": "solve.TimeRationalSystemSymbol.time_solve", "number": 0, "param_names": ["param1"], "params": [["1", "3", "5"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "985dac2f7080df3508935e80f53818920b5164d3e57147d83851cff09b053584", "warmup_time": -1}, "solve.TimeSolve01.time_solve": {"code": "class TimeSolve01:\n    def time_solve(self):\n        sympy.solve(self.eqs, *self.p.c)\n\n    def setup(self):\n        self.eqs, self.p, self.y = _mk_eqs(2)  # running with wy=3 is too slow (~5s)", "min_run_count": 2, "name": "solve.TimeSolve01.time_solve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c739f255e32c1db03e63dd3113edd4eae2573d251385cbeef46528b3a6de3a13", "warmup_time": -1}, "solve.TimeSolve01.time_solve_nocheck": {"code": "class TimeSolve01:\n    def time_solve_nocheck(self):\n        sympy.solve(self.eqs, *self.p.c, check=False)\n\n    def setup(self):\n        self.eqs, self.p, self.y = _mk_eqs(2)  # running with wy=3 is too slow (~5s)", "min_run_count": 2, "name": "solve.TimeSolve01.time_solve_nocheck", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aff30bc9ac9713584bbf6a652875a5ff7d12d0472ba98c66d5553f44b6e7d0a8", "warmup_time": -1}, "solve.TimeSolveSparsePolySystem.time_solve": {"code": "class TimeSolveSparsePolySystem:\n    def time_solve(self, n):\n        sympy.solve(self.eqs, self.syms)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.make_polysys(n)", "min_run_count": 2, "name": "solve.TimeSolveSparsePolySystem.time_solve", "number": 0, "param_names": ["param1"], "params": [["1", "2", "3"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ffd76d3eddd16eff92246b653c8e3e3e6f6a945b06423919c205c5a7678a3457", "warmup_time": -1}, "solve.TimeSparseSystem.time_linear_eq_to_matrix": {"code": "class TimeSparseSystem:\n    def time_linear_eq_to_matrix(self, n):\n        sympy.linear_eq_to_matrix(self.eqs, self.syms)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.mk_eqs(n)\n        self.Ab = sympy.linear_eq_to_matrix(self.eqs, self.syms)\n        self.Aaug = sympy.Matrix.hstack(*self.Ab)", "min_run_count": 2, "name": "solve.TimeSparseSystem.time_linear_eq_to_matrix", "number": 0, "param_names": ["param1"], "params": [["10", "20", "30"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3829d31f381d3940d7349ef3ff3d39f834b2dc8ca91745676465394b255a9cd7", "warmup_time": -1}, "solve.TimeSparseSystem.time_linsolve_Aaug": {"code": "class TimeSparseSystem:\n    def time_linsolve_Aaug(self, n):\n        sympy.linsolve(self.Aaug)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.mk_eqs(n)\n        self.Ab = sympy.linear_eq_to_matrix(self.eqs, self.syms)\n        self.Aaug = sympy.Matrix.hstack(*self.Ab)", "min_run_count": 2, "name": "solve.TimeSparseSystem.time_linsolve_Aaug", "number": 0, "param_names": ["param1"], "params": [["10", "20", "30"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b77d329a48bd67310e0ffb555edfe66dc05bdc41d83f2e8dee9c18020dbdc332", "warmup_time": -1}, "solve.TimeSparseSystem.time_linsolve_Ab": {"code": "class TimeSparseSystem:\n    def time_linsolve_Ab(self, n):\n        sympy.linsolve(self.Ab)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.mk_eqs(n)\n        self.Ab = sympy.linear_eq_to_matrix(self.eqs, self.syms)\n        self.Aaug = sympy.Matrix.hstack(*self.Ab)", "min_run_count": 2, "name": "solve.TimeSparseSystem.time_linsolve_Ab", "number": 0, "param_names": ["param1"], "params": [["10", "20", "30"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4937b57eb01a2a02d0826c74c90fa56bea4c62912f2145362461cf50cbffd000", "warmup_time": -1}, "solve.TimeSparseSystem.time_linsolve_eqs": {"code": "class TimeSparseSystem:\n    def time_linsolve_eqs(self, n):\n        sympy.linsolve(self.eqs, self.syms)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.mk_eqs(n)\n        self.Ab = sympy.linear_eq_to_matrix(self.eqs, self.syms)\n        self.Aaug = sympy.Matrix.hstack(*self.Ab)", "min_run_count": 2, "name": "solve.TimeSparseSystem.time_linsolve_eqs", "number": 0, "param_names": ["param1"], "params": [["10", "20", "30"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4eb5fc1a4f19511c86a658bf25e6690ec11bf920eaf122676cc572c0cd7acd9e", "warmup_time": -1}, "solve.TimeSparseSystem.time_solve": {"code": "class TimeSparseSystem:\n    def time_solve(self, n):\n        sympy.solve(self.eqs, self.syms)\n\n    def setup(self, n):\n        self.eqs, self.syms = self.mk_eqs(n)\n        self.Ab = sympy.linear_eq_to_matrix(self.eqs, self.syms)\n        self.Aaug = sympy.Matrix.hstack(*self.Ab)", "min_run_count": 2, "name": "solve.TimeSparseSystem.time_solve", "number": 0, "param_names": ["param1"], "params": [["10", "20", "30"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c0603b27e86a523667b5887c2ea227869727b6030611523b1e3b219d3f98b50e", "warmup_time": -1}, "sum.TimeSum.time_doit": {"code": "class TimeSum:\n    def time_doit(self):\n        self.expr.doit()\n\n    def setup(self):\n        self.expr = Sum(Ts(int32ASU2L, ((), ((0, 1, -I/2), (1, 0, I/2)), ()), ext12Pi, int12Pi)*Ts(int42ASU2L, ((), ((0, 1, -I/2), (1, 0, I/2)), ()), ext22Pi, int22Pi)*Ts(int52ASU2L, ((), ((0, 1, -I/2), (1, 0, I/2)), ()), int12Pi, ext32Pi)*Ts(int62ASU2L, ((), ((0, 1, -I/2), (1, 0, I/2)), ()), int22Pi, ext42Pi)*KroneckerDelta(int32ASU2L, int42ASU2L)*KroneckerDelta(int52ASU2L, int62ASU2L), (int12Pi, 1, 2), (int22Pi, 1, 2), (exgg12SU2L, intgg11SU2L, intgg11SU2L), (ext12Pi, ext11Pi, ext11Pi), (exgg22SU2L, intgg11SU2L, intgg11SU2L), (ext22Pi, ext31Pi, ext31Pi), (exgg32SU2L, intgg21SU2L, intgg21SU2L), (ext32Pi, ext21Pi, ext21Pi), (exgg42SU2L, intgg21SU2L, intgg21SU2L), (ext42Pi, ext41Pi, ext41Pi), (int32ASU2L, 0, 2), (int42ASU2L, 0, 2), (int52ASU2L, 0, 2), (int62ASU2L, 0, 2))", "min_run_count": 2, "name": "sum.TimeSum.time_doit", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dd964154c39ece6c4a83049fa719aa11c2021e57d5857f04f3aa5a68b82b55bd", "warmup_time": -1}}, "machines": {"unbuntu": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz", "machine": "unbuntu", "num_cpu": "16", "os": "Linux 5.3.0-51-generic", "ram": "32805520", "version": 1}}, "tags": {"sympy-0.5.0": 221, "sympy-0.5.10": 757, "sympy-0.5.11": 766, "sympy-0.5.12": 865, "sympy-0.5.13": 993, "sympy-0.5.14": 1164, "sympy-0.5.15": 1223, "sympy-0.5.3": 327, "sympy-0.5.4": 576, "sympy-0.5.5": 626, "sympy-0.5.6": 634, "sympy-0.5.7": 647, "sympy-0.5.8": 689, "sympy-0.5.9": 715, "sympy-0.6.0": 1367, "sympy-0.6.1": 1496, "sympy-0.6.2": 1657, "sympy-0.6.3": 1913, "sympy-0.6.3.beta1": 1903, "sympy-0.6.3.beta2": 1910, "sympy-0.6.4": 2132, "sympy-0.6.4.beta1": 2039, "sympy-0.6.4.beta2": 2079, "sympy-0.6.4.beta3": 2128, "sympy-0.6.5": 2338, "sympy-0.6.5-beta1": 2263, "sympy-0.6.5.beta2": 2275, "sympy-0.6.5.beta3": 2298, "sympy-0.6.5.rc1": 2322, "sympy-0.6.5.rc2": 2336, "sympy-0.6.6": 2748, "sympy-0.6.6.rc1": 2747, "sympy-0.6.7": 2813, "sympy-0.7.0": 7332, "sympy-0.7.0.rc1": 7080, "sympy-0.7.0.rc2": 7117, "sympy-0.7.1": 7918, "sympy-0.7.1.rc1": 7834, "sympy-0.7.2": 15892, "sympy-0.7.2.rc1": 15796, "sympy-0.7.3": 21505, "sympy-0.7.3.rc1": 21286, "sympy-0.7.4": 24189, "sympy-0.7.4.1": 24279, "sympy-0.7.4.rc1": 24122, "sympy-0.7.5": 25234, "sympy-0.7.5.rc1": 25168, "sympy-0.7.6": 29003, "sympy-0.7.6.1": 32218, "sympy-0.7.6.rc1": 28879, "sympy-0.7.6.rc2": 28917, "sympy-1.0": 34273, "sympy-1.0.rc1": 34135, "sympy-1.1": 40651, "sympy-1.1.1": 41185, "sympy-1.1.1rc1": 41078, "sympy-1.1rc1": 40557, "sympy-1.2": 46334, "sympy-1.2rc1": 46289, "sympy-1.3": 47513, "sympy-1.3rc1": 47423, "sympy-1.4": 51814, "sympy-1.4rc1": 51478, "sympy-1.4rc2": 51602, "sympy-1.5": 56827, "sympy-1.5.1": 56971, "sympy-1.5b1": 56619, "sympy-1.5rc1": 56721}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}